/**
 * Copyright (c) 2016, All partners of the iTesla project (http://www.itesla-project.eu/consortium)
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
package cim1.model;

import cim1.exc.InterpretationException;
import cim1.exc.LinkageException;
import java.util.BitSet;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.EnumMap;
import javax.xml.stream.XMLStreamException;
import cim1.CIMURI;
import javax.xml.stream.XMLStreamWriter;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 *
 * This file has been automatically generated by CIMGateway
 *
 * Description :
 *
 * This class "OperationalLimitType.java" represents the
 * class OperationalLimitType extends IdentifiedObject
 *    + OperationalLimit   0..-1   OperationalLimit   (inverseAssociation) 
 *    + direction   1..1   OperationalLimitDirectionKind 
 *    + acceptableDuration   1..1   float 

 */
public class OperationalLimitType extends IdentifiedObject {

    private static Logger LOGGER = LoggerFactory.getLogger(OperationalLimitType.class);

    /**
     * Attribute "operationalLimit"
     *
     * Comment from profile:
     * The operational limits associated with this type of limit.
     */
    public List<OperationalLimit> operationalLimit;

    /**
     * Attribute "direction"
     *
     * Comment from profile:
     * The direction of the limit.
     */
    public OperationalLimitDirectionKind direction;

    /**
     * Attribute "acceptableDuration"
     *
     * Comment from profile:
     * The nominal acceptable duration of the limit.  Limits are commonly expressed in terms of the a time limit for which the limit is normally acceptable.   The actual acceptable duration of a specific limit may depend on other local factors such as temperature or wind speed.
     */
    public float acceptableDuration;

    /**
     * The current bitset describing the state of each CIM attribute of this
     * class
     */
    private BitSet currentBitset = new BitSet();

   /**
    * The bitset describing which CIM attributes of this class have to set to
    * be consistent within a "merged" context
    */
    private final BitSet minBitset = new BitSet();

   /**
    * The Map of subset<=>bitset describing which CIM attributes of this class
    * have to set to be consistent within a specific subset context
    */
    private final Map<Subset, BitSet> minBitsets
            = new EnumMap<Subset, BitSet>(Subset.class);

  /**
   * Utility to return the "operationalLimit" List of 
   * "OperationalLimit" enum
   *
   * @return the list of the attributes "operationalLimit"
   */
    public List<OperationalLimit > getOperationalLimit() {
        return this.operationalLimit;
    }

    /**
     * Utility to add a value within the "operationalLimit" ArrayList of 
     * "OperationalLimit"
     *
     * @param operationalLimitValue 
     *            value to add within the ArrayList
     * @param setInverse
     *            boolean to specify whether to set the inverse association or not
     * @throws LinkageException
     */
    public void addOperationalLimit(
            OperationalLimit operationalLimitValue, 
            boolean setInverse) throws LinkageException {
        
        if (operationalLimit == null) {
            operationalLimit = new ArrayList<OperationalLimit>();
        }
        
        this.operationalLimit.add(operationalLimitValue);
        this.currentBitset.set(0);
       
        if (setInverse) {
            
            if (operationalLimitValue != null) {
                operationalLimitValue.setOperationalLimitType(this, false);
            }
        }
    }

    /**
     * Utility to test if the value of "operationalLimit" has been set
     *
     * @return boolean
     *            if true the attribute "operationalLimit" is already set
     *            if false it isn't yet
     */
    public boolean operationalLimitIsSet() {
        return this.currentBitset.get(0);
    }
    
    /**
     * Utility to return the "direction" enum
     *
     * @return the value of the attribute "direction"
     */
    public OperationalLimitDirectionKind getDirection() {
        return this.direction;
    }

    /**
     * Utility to set the "direction" enum
     *
     * @param directionValue operand to set
     */
    public void setDirection(OperationalLimitDirectionKind directionValue) {
        this.direction = directionValue;
        this.currentBitset.set(1);
    }

    /**
     * Utility to test if the value of "direction" has been set
     *
     * @return boolean
     *            if true the attribute "direction" is already set
     *            if false it isn't yet
     */
    public boolean directionIsSet() {
        return this.currentBitset.get(1);
    }
    
    /**
     * Utility to return the "acceptableDuration" value
     *
     * @return the value of the attribute "acceptableDuration"
     */
    public float getAcceptableDuration() {
        return this.acceptableDuration;
    }

    /**
     * Utility to set the "acceptableDuration" value
     *
     * @param acceptableDurationValue 
     *            value to set
     */
    public void setAcceptableDuration(float acceptableDurationValue) {
        this.acceptableDuration = acceptableDurationValue;
        this.currentBitset.set(2);
    }

    /**
     * Utility to test if the value of "acceptableDuration" has been set
     *
     * @return boolean
     *            if true the attribute "acceptableDuration" is already set
     *            if false isn't yet
     */
    public boolean acceptableDurationIsSet() {
        return this.currentBitset.get(2);
     }


    /**
     * Factory of the class
     *
     * @param id
     *            id of the class OperationalLimitType to create
     * @return the class created
     */
    public static OperationalLimitType create(final String id) {
        OperationalLimitType newOperationalLimitType = new OperationalLimitType();
        newOperationalLimitType.setId(id);
        return newOperationalLimitType;
    }

    /**
     * Utility to "clear" the content of a class when a subset is invalidated
     *
     * @param subset subset to clean
     */
    @Override
    public void clearContent(Subset subset) {

        // First of all, we clear the associations:
        this.clearAssociations(subset);

        switch (subset) {
            default: // nothing to clear
        }
    }

    /**
     * Utility to read an attribute
     * This function is called by the CIMModel
     *
     * @param class_name
     *            the read name of class
     * @param attr_name
     *            the read name of attribute
     * @param value
     *            the read value of the attribute
     * @param model
     *            the interface to the model this class belongs to
     * @throws InterpretationException
     */
    @Override
    public void readAttribute(final String class_name, final String attr_name,
                              final String value, CIMModel model) throws InterpretationException {

        if (class_name.equals("OperationalLimitType")) {
            if (attr_name.equals("acceptableDuration")) {

                if (!(model.isCurrentSubsetSet())
                        || (model.getCurrentSubset() == Subset.Equipment)) {
                    float typedValue;

                    if (!value.isEmpty()) {

                        try {
                            if (value.equalsIgnoreCase("NaN")) {
                                throw new NumberFormatException();
                            }
                            typedValue = Float.parseFloat(value);
                        } catch(NumberFormatException e) {
                            throw new InterpretationException("The attribute acceptableDuration in class "
                                + "OperationalLimitType is supposed to be a Float"
                                + " but has not the expected NumberFormat");
                        }

                    } else {
                        typedValue = Float.POSITIVE_INFINITY;
                    }

                    this.setAcceptableDuration(typedValue);
                    return;
                } else {
                    StringBuilder errorMessage
                            = new StringBuilder("The attribute \"");
                    errorMessage.append(attr_name);
                    errorMessage.append("\" in class \"");
                    errorMessage.append(class_name);
                    errorMessage.append("\" cannot be defined in a file ");
                    errorMessage.append("describing an other subset than ");
                    errorMessage.append("\"Equipment\".");
                    throw new InterpretationException(errorMessage.toString());
                }
            }
                StringBuilder errorMessage = new StringBuilder("The attribute \"");
                errorMessage.append(attr_name);
                errorMessage.append("\" in class \"");
                errorMessage.append(class_name);
                errorMessage
                        .append("\" could not be found in the model !");
                throw new InterpretationException(errorMessage.toString());
            } else {
                // We do not check if we are in the proper subset
                // to call the function on
                // the parent class
                super.readAttribute(class_name, attr_name, value, model);

            }
    }

    /**
     * Utility to read a reference to a resource
     * This function is called by the CIMModel
     *
     * @param class_name
     *            the read name of class
     * @param resource_name
     *            the read name of the associated resource
     * @param id
     *            the id of the associated resource
     * @param model
     *            the model this class belongs to
     * @throws InterpretationException
     */
    @Override
    public void readResource(final String class_name,
            final String resource_name, final String id, CIMModel model)
            throws InterpretationException, LinkageException {
        if (class_name.equals("OperationalLimitType")) {
        // Particular case : enum !
            if (resource_name.equals("direction")) {

                if (!(model.isCurrentSubsetSet())
                        || (model.getCurrentSubset() == Subset.Equipment)) {
                    int pos = id.lastIndexOf('.');
                    String operand = id.substring(++pos);

                    try {
                        this.setDirection(OperationalLimitDirectionKind
                                .valueOf(OperationalLimitDirectionKind.class, operand));
                    } catch (IllegalArgumentException e) {
                        StringBuilder errorMessage
                                = new StringBuilder("The value \"");
                        errorMessage.append(operand);
                        errorMessage
                                .append("\" could not be found in the enum Class \"");
                        errorMessage.append("OperationalLimitDirectionKind");
                        throw new InterpretationException(errorMessage.toString());
                    }

                    return;
                } else {
                    StringBuilder errorMessage = new StringBuilder("The association \"");
                    errorMessage.append(resource_name);
                    errorMessage.append("\" in class \"");
                    errorMessage.append(class_name);
                    errorMessage.append("\" is not supposed to be in the subset \"");
                    errorMessage.append(model.getCurrentSubset().getIdentifier());
                    errorMessage.append("\"");
                    throw new InterpretationException(errorMessage.toString());
                }

            }

            StringBuilder errorMessage = new StringBuilder("The association \"");
            errorMessage.append(resource_name);
            errorMessage.append("\" in class \"");
            errorMessage.append(class_name);
            errorMessage.append("\" could not be found in the model !");
            throw new InterpretationException(errorMessage.toString());
        } else {
            super.readResource(class_name, resource_name, id, model);
        }
    }

    /**
     * Utility to write the content into the CIM XML format
     *
     * @param writeID
     *            specifies whether to write the XML "id" attribute (this is used for describing concrete class)
     * @param xmlsw
     *            XMLStreamWriter where are stored the elements to write
     */
    @Override
    public void write(XMLStreamWriter xmlsw, boolean writeID) {

        /*
         * In previous versions, we used to check the consistency
         * of the instance in the context but this task is now
         * performed by the model before attempting to write.
         * Therefore each instance can now be written even if
         * it is not consistent !
         */

        if (writeID) {

            try {
                xmlsw.writeStartElement(CIMURI.CIMURI, "OperationalLimitType");
                xmlsw.writeAttribute(CIMModel.rdfURI, "ID", getId());
                // xmlsw.writeCharacters("\n");
            } catch (XMLStreamException e) {
                StringBuilder errorMessage = new StringBuilder(
                        "Error while trying to write the class ");
                errorMessage.append("OperationalLimitType ");
                errorMessage.append("which ID has been initialized to : ");
                errorMessage.append(getId());
                LOGGER.error(errorMessage.toString());
                LOGGER.error(e.toString(), e);
            }
        }
        writeClass(xmlsw);
        super.write(xmlsw, false);

        if (writeID) {
            try {
                xmlsw.writeEndElement();
                // xmlsw.writeCharacters("\n");
            } catch (XMLStreamException e) {
                StringBuilder errorMessage = new StringBuilder(
                        "Error while trying to write the end Element of the class ");
                errorMessage.append("OperationalLimitType ");
                errorMessage.append("which ID has been initialized to : ");
                errorMessage.append(getId());
                LOGGER.error(errorMessage.toString());
                LOGGER.error(e.toString(), e);
            }
        }

        return;
    }

    /**
     * Utility to write the content this class into the CIM/XML format according
     * to a subset
     *
     * @param subset
     *            the subset defining the context in which to write this class
     * @param writeID
     *            specifies whether to write the XML "id" attribute (this is used for describing concrete class)
     * @param xmlsw
     *            the stream in which are stored the elements to write
     */
    @Override
    public void write(XMLStreamWriter xmlsw, final Subset subset,
            boolean writeID) {

        /*
         * In previous versions, we used to check the consistency
         * of the instance in the context but this task is now
         * performed by the model before attempting to write.
         * Therefore each instance can now be written even if
         * it is not consistent !
         */

        switch (subset) {
        case Equipment: {

            if (writeID) {
                try {
                    xmlsw.writeStartElement(CIMURI.CIMURI, "OperationalLimitType");
                    xmlsw.writeAttribute(CIMModel.rdfURI, "ID", getId());
                    // xmlsw.writeCharacters("\n");
                } catch (XMLStreamException e) {
                    StringBuilder errorMessage = new StringBuilder(
                            "Error while trying to write the class ");
                    errorMessage.append("OperationalLimitType ");
                    errorMessage.append("which ID has been initialized to : ");
                    errorMessage.append(getId());
                    errorMessage.append(" in the subset ");
                    errorMessage.append("Equipment");
                   LOGGER.error(errorMessage.toString());
                   LOGGER.error(e.toString(), e);
                }
            }

            writeClass(xmlsw);
            super.write(xmlsw, subset, false);
            if (writeID) {

                try {
                    xmlsw.writeEndElement();
                    // xmlsw.writeCharacters("\n");
                } catch (XMLStreamException e) {
                    StringBuilder errorMessage = new StringBuilder(
                            "Error while trying to write end element of ");
                    errorMessage.append("OperationalLimitType ");
                    errorMessage.append("which ID has been initialized to : ");
                    errorMessage.append(getId());
                    errorMessage.append(" in the subset ");
                    errorMessage.append("Equipment");
                    LOGGER.error(errorMessage.toString());
                    LOGGER.error(e.toString(), e);
                }

            }
            break;
        }
        default: {// Do nothing !
        }
        }
        return;
    }

    /**
     * Utility to resolve the links at the end of parsing
     *
     * @param model
     *            the model this class belongs to
     * @param boundaryModel
     *            the model that gather data about the boundarySet, used
     *            as a resource force links resolving
     * @throws Linkage Exception
     */
    @Override
    public void resolveLinks(CIMModel model, CIMModel boundaryModel) throws LinkageException {

        // TODO : implement vectors (not required according to CIM
        // specifications)
        super.resolveLinks(model, boundaryModel);
        removeFromUnresolved();
    }

    /**
     * Utility to check whether this class is consistent according to a subset
     *
     * @param subset
     *            the subset defining the context in which to check whether this class is consistent
     * @return a ConsistencyCheck instance whose boolean attribute (consistent)
     *         indicates if this class is consistent and whose String attribute
     *         (message)
     *         indicates why this class is not consistent if it is not
     */
    @Override
    public ConsistencyCheck modelConsistency(final Subset subset) {
        BitSet intersection = new BitSet(this.minBitsets.get(subset).length());
        intersection.or(this.minBitsets.get(subset));
        // we create a copy of minBitsets.get(subset)
        intersection.and(this.currentBitset);
        boolean consistent = (this.minBitsets.get(subset).equals(intersection));
        StringBuilder message = new StringBuilder("");

        if (!consistent) {
            message.append(getMessageForConsistency(this.minBitsets.get(subset)));
        }
        // consistent = (super.modelConsistency().getLeft()) ? (consistent &&
        // (true)):(consistent && (false))
        // message.append((super.modelConsistency(subset)).getRight());

        if (super.modelConsistency().isConsistent()) {
            consistent = consistent && (true);
            message.append((super.modelConsistency(subset)).getMessage());
        } else {
            consistent = consistent && (false);
            message.append((super.modelConsistency(subset)).getMessage());
        }

        return new ConsistencyCheck(consistent, message.toString());
    }

    /**
     * Utility to check whether this class is consistent in a "merged" context
     *
     * @return a ConsistencyCheck instance whose boolean attribute (consistent)
     *         indicates if this class is consistent and whose String attribute
     *         (message)
     *         indicates why this class is not consistent if it is not
     */
    @Override
    public ConsistencyCheck modelConsistency() {
        BitSet intersection = new BitSet(this.minBitset.length());
        intersection.or(this.minBitset);
        // we create a copy of minBitSet
        intersection.and(this.currentBitset);
        boolean consistent = (this.minBitset.equals(intersection));
        StringBuilder message = new StringBuilder("");

        if (!consistent) {
        message.append(getMessageForConsistency(this.minBitset));
        }
        // consistent = (super.modelConsistency().getLeft()) ? (consistent &&
        // (true)):(consistent && (false))
        // message += (super.modelConsistency(subset)).getRight();

        if (super.modelConsistency().isConsistent()) {
            consistent = consistent && (true);
            message.append((super.modelConsistency()).getMessage());
        } else {
            consistent = consistent && (false);
            message.append((super.modelConsistency()).getMessage());
        }

        return new ConsistencyCheck(consistent, message.toString());
    }

    /**
     * Utility to copy the "base" of an other instance of the same class
     * This utility does not copy the associations with other instances from
     * the instance to copy
     *
     * @param otherOperationalLimitType
     *            the instance to copy
     */
    public void copyBase(final OperationalLimitType otherOperationalLimitType) {
        // assigning enum type :

        OperationalLimitDirectionKind newdirection;

        if (otherOperationalLimitType.currentBitset.get(1)) {
            newdirection = otherOperationalLimitType.getDirection();
            this.setDirection(newdirection);
        }
        float newacceptableDuration;
        // assigning primitive type :
        if (otherOperationalLimitType.currentBitset.get(2)) {
            newacceptableDuration = otherOperationalLimitType.getAcceptableDuration();
            this.setAcceptableDuration(newacceptableDuration);
          }
        // Memory allocation has done successfully !
        // Dropping "old" objects...
        // This part may change : we do nothing to allow the user to access
        // object by their id from the global model.

        // TODO : Call the parent copy constructor instead ?
        super.copyBase(otherOperationalLimitType);

    }

    /**
     * Utility to return the content of this class into the CIM XML format
     *
     * @param xmlsw
     *            the stream in which are stored the elements to write
     */
    private void writeClass(XMLStreamWriter xmlsw) {

        if (currentBitset.get(0)) {
      for (OperationalLimit operationalLimit : this.operationalLimit){
               try {
                 xmlsw.writeEmptyElement(CIMURI.CIMURI,"OperationalLimitType.OperationalLimit");
                 xmlsw.writeAttribute(CIMModel.rdfURI, "resource", "#"
                           + operationalLimit.getId());
               } catch (XMLStreamException e) {
                 StringBuilder errorMessage = new StringBuilder(
                                    "Error while trying to write the reference to ");
                 errorMessage.append("OperationalLimitType ");
                 errorMessage.append("which ID has been initialized to : ");
                 errorMessage.append(getId());
                 errorMessage.append(" in the subset ");
                 errorMessage.append("Equipment");
                 LOGGER.error(errorMessage.toString());
                 LOGGER.error(e.toString(), e);
               }
      }
        }

        if (currentBitset.get(1)) {
        try {
            // xmlsw.writeCharacters("\t");
            xmlsw.writeEmptyElement(CIMURI.CIMURI,
                    "OperationalLimitType.direction");
            xmlsw.writeAttribute(CIMModel.rdfURI, "resource",
                    "http://iec.ch/TC57/2009/CIM-schema-cim14#OperationalLimitDirectionKind."
                    + getDirection());
            // xmlsw.writeCharacters("\n");
        } catch(XMLStreamException e) {
            StringBuilder errorMessage = new StringBuilder(
                    "Error while trying to write the Enum attribute ");
            errorMessage.append("direction");
            errorMessage.append(" in class ");
            errorMessage.append("OperationalLimitType ");
            errorMessage.append("which ID has been initialized to : ");
            errorMessage.append(getId());
            LOGGER.error(errorMessage.toString());
            LOGGER.error(e.toString(), e);
        }
        }

        if (currentBitset.get(2)) {

        try {

            if (getAcceptableDuration() != Float.POSITIVE_INFINITY) {
                // xmlsw.writeCharacters("\t");
                xmlsw.writeStartElement(CIMURI.CIMURI,
                        "OperationalLimitType.acceptableDuration");
                xmlsw.writeCharacters(String.valueOf(getAcceptableDuration()));
                xmlsw.writeEndElement();
                // xmlsw.writeCharacters("\n");
            } else {
                // xmlsw.writeCharacters("\t");
                xmlsw.writeStartElement(CIMURI.CIMURI,
                        "OperationalLimitType.acceptableDuration");
                xmlsw.writeEndElement();
                // xmlsw.writeCharacters("\n");
            }
        } catch(XMLStreamException e) {
            StringBuilder errorMessage = new StringBuilder(
                    "Error while trying to write the value of the attribute ");
            errorMessage.append("acceptableDuration");
            errorMessage.append(" in class ");
            errorMessage.append("OperationalLimitType ");
            errorMessage.append("which ID has been initialized to : ");
            errorMessage.append(getId());
            LOGGER.error(errorMessage.toString());
        }
        }

        return;
    }

    /**
     * Utility in charge of creating the message when the class is not
     * consistent within a specific context
     *
     * @param minBitset
     *            bitset describing which CIM attributes of this class have
     *            to be set so that it is consistent within a
     *            specific subset context
     * @return the message explaining what is not consistent
     */
    private String getMessageForConsistency(final BitSet minBitset) {

        StringBuilder message = new StringBuilder(
                "Instance of \"OperationalLimitType\" of id \"");
        message.append(this.getId());
        message.append("\" is not consistent in this context:\n");
        /*
         * XOR and then AND
         * The result is :
         * "1" : has not been set and need to be
         * "0" : has been set or is not mandatory
         */

        BitSet isNotSet = new BitSet(minBitset.length());
        isNotSet.or(minBitset);
        // we create a copy of minBitset
        isNotSet.xor(this.currentBitset);
        isNotSet.and(minBitset);

        if (isNotSet.get(0)) {
            message.append("\t\"OperationalLimit\" needs to be set\n");
        }

        if (isNotSet.get(1)) {
            message.append("\t\"direction\" needs to be set\n");
        }

        if (isNotSet.get(2)) {
            message.append("\t\"acceptableDuration\" needs to be set\n");
        }
        return message.toString();
    }

    /**
     * Copy constructor
     * The associations with other objects are not copied
     *
     * @param OperationalLimitType
     *            the reference to the class to copy
     * @return the class constructed
     */
    private OperationalLimitType(final OperationalLimitType otherOperationalLimitType) {
        // TODO : check exception safe
        this.copyBase(otherOperationalLimitType);
    }

   /**
    * Constructor of the class OperationalLimitType
    */
    protected OperationalLimitType() {

        super.subset = Subset.Equipment;
        this.minBitsets.put(Subset.StateVariables, new BitSet(3));
        this.minBitsets.put(Subset.Topology, new BitSet(3));
        BitSet classBitset = new BitSet(3);
        classBitset.set(1);
        classBitset.set(2);
        this.minBitsets.put(Subset.Equipment, classBitset);
    }



    /**
     * Utility to clear the associations of this class belonging to a
     * specific subset
     *
     * @param subset
     *            the subset from which to clear the associations of this class
     */
    @Override
    protected void clearAssociations(final Subset subset) {

        switch (subset) {
            case StateVariables: {
                super.clearAssociations(subset);
                break;
            }
            case Topology: {
                super.clearAssociations(subset);
                break;
            }
            case Equipment: {
                super.clearAssociations(subset);
                break;
            }
            default: // nothing to clear
        }
    }

    /**
     * Utility returning a copy of the "base" of this instance
     * This utility does not copy the associations with other instances
     *
     * @return a clone of this instance
     */
    public OperationalLimitType clone() {
        OperationalLimitType newInstance = new OperationalLimitType(this);
        OperationalLimitType newInstanceSP = newInstance;
        return newInstanceSP;
    }

}



