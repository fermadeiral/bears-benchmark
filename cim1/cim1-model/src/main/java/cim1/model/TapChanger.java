/**
 * Copyright (c) 2016, All partners of the iTesla project (http://www.itesla-project.eu/consortium)
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/.
 */
package cim1.model;

import cim1.exc.InterpretationException;
import cim1.exc.LinkageException;
import java.util.BitSet;
import java.util.Map;
import java.util.EnumMap;
import javax.xml.stream.XMLStreamException;
import cim1.CIMURI;
import javax.xml.stream.XMLStreamWriter;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 *
 * This file has been automatically generated by CIMGateway
 *
 * Description :
 *
 * This class "TapChanger.java" represents the
 * class TapChanger extends IdentifiedObject
 *    + highStep   1..1   int 
 *    + neutralU   1..1   float 
 *    + neutralStep   1..1   int 
 *    + RegulatingControl   0..1   RegulatingControl 
 *    + SvTapStep   0..1   SvTapStep 
 *    + stepVoltageIncrement   0..1   float 
 *    + lowStep   1..1   int 

 */
public class TapChanger extends IdentifiedObject {

    private static Logger LOGGER = LoggerFactory.getLogger(TapChanger.class);

    /**
     * Attribute "highStep"
     *
     * Comment from profile:
     * Highest possible tap step position, advance from neutral
     */
    public int highStep;

    /**
     * Attribute "neutralU"
     *
     * Comment from profile:
     * Voltage at which the winding operates at the neutral tap setting.
     */
    public float neutralU;

    /**
     * Attribute "neutralStep"
     *
     * Comment from profile:
     * The neutralStep value cannot be higher than the highStep value or lower than the lowStep value. 
     */
    public int neutralStep;

    public RegulatingControl regulatingControl;

    /**
     * The id of the attribute "regulatingControl"
     * This id is mainly used to resolve links after parsing an instance
     */

    public String idRegulatingControl;

    /**
     * Attribute "svTapStep"
     *
     * Comment from profile:
     * The tap step state associated with the tap changer.
     */
    public SvTapStep svTapStep;

    /**
     * The id of the attribute "svTapStep"
     * This id is mainly used to resolve links after parsing an instance
     */

    public String idSvTapStep;

    /**
     * Attribute "stepVoltageIncrement"
     *
     * Comment from profile:
     * This is required for RatioTapChanger. It is Optional for most phase shifters since these are not used to regulate voltages
     */
    public float stepVoltageIncrement;

    /**
     * Attribute "lowStep"
     *
     * Comment from profile:
     * Lowest possible tap step position, retard from neutral
     */
    public int lowStep;

    /**
     * The current bitset describing the state of each CIM attribute of this
     * class
     */
    private BitSet currentBitset = new BitSet();

   /**
    * The bitset describing which CIM attributes of this class have to set to
    * be consistent within a "merged" context
    */
    private final BitSet minBitset = new BitSet();

   /**
    * The Map of subset<=>bitset describing which CIM attributes of this class
    * have to set to be consistent within a specific subset context
    */
    private final Map<Subset, BitSet> minBitsets
            = new EnumMap<Subset, BitSet>(Subset.class);

    
    /**
     * Utility to return the "highStep" value
     *
     * @return the value of the attribute "highStep"
     */
    public int getHighStep() {
        return this.highStep;
    }

    /**
     * Utility to set the "highStep" value
     *
     * @param highStepValue 
     *            value to set
     */
    public void setHighStep(int highStepValue) {
        this.highStep = highStepValue;
        this.currentBitset.set(0);
    }

    /**
     * Utility to test if the value of "highStep" has been set
     *
     * @return boolean
     *            if true the attribute "highStep" is already set
     *            if false isn't yet
     */
    public boolean highStepIsSet() {
        return this.currentBitset.get(0);
     }
    
    /**
     * Utility to return the "neutralU" value
     *
     * @return the value of the attribute "neutralU"
     */
    public float getNeutralU() {
        return this.neutralU;
    }

    /**
     * Utility to set the "neutralU" value
     *
     * @param neutralUValue 
     *            value to set
     */
    public void setNeutralU(float neutralUValue) {
        this.neutralU = neutralUValue;
        this.currentBitset.set(1);
    }

    /**
     * Utility to test if the value of "neutralU" has been set
     *
     * @return boolean
     *            if true the attribute "neutralU" is already set
     *            if false isn't yet
     */
    public boolean neutralUIsSet() {
        return this.currentBitset.get(1);
     }
    
    /**
     * Utility to return the "neutralStep" value
     *
     * @return the value of the attribute "neutralStep"
     */
    public int getNeutralStep() {
        return this.neutralStep;
    }

    /**
     * Utility to set the "neutralStep" value
     *
     * @param neutralStepValue 
     *            value to set
     */
    public void setNeutralStep(int neutralStepValue) {
        this.neutralStep = neutralStepValue;
        this.currentBitset.set(2);
    }

    /**
     * Utility to test if the value of "neutralStep" has been set
     *
     * @return boolean
     *            if true the attribute "neutralStep" is already set
     *            if false isn't yet
     */
    public boolean neutralStepIsSet() {
        return this.currentBitset.get(2);
     }
    
    /**
     * Utility to return the "regulatingControl"
     *
     * @return the value of the attribute "regulatingControl"
     */
    public RegulatingControl getRegulatingControl() {
        return this.regulatingControl;
    }

    /**
     * Utility to test if the value of "regulatingControl" has been set
     *
     * @return boolean
     *            if true the attribute "regulatingControl" is already set
     *            if false it isn't yet
     */
    public boolean regulatingControlIsSet() {
        return this.currentBitset.get(3);
    }

    /**
     * Utility to set the "regulatingControlValue"
     *
     * @param regulatingControlValue
     *            instance to set
     * @param setInverse
     *            boolean to specify whether to set the inverse association
     *            or not
     * @throws LinkageException
     */
    public void setRegulatingControl(
            RegulatingControl regulatingControlValue,
            boolean setInverse) throws LinkageException {
        this.regulatingControl = regulatingControlValue;
        this.currentBitset.set(3);
        if (setInverse) {
            
            if (regulatingControlValue != null) {
                regulatingControlValue.addTapChanger(this, false);
            }
        }
    }
    
    /**
     * Utility to return the "svTapStep"
     *
     * @return the value of the attribute "svTapStep"
     */
    public SvTapStep getSvTapStep() {
        return this.svTapStep;
    }

    /**
     * Utility to test if the value of "svTapStep" has been set
     *
     * @return boolean
     *            if true the attribute "svTapStep" is already set
     *            if false it isn't yet
     */
    public boolean svTapStepIsSet() {
        return this.currentBitset.get(4);
    }

    /**
     * Utility to set the "svTapStepValue"
     *
     * @param svTapStepValue
     *            instance to set
     * @param setInverse
     *            boolean to specify whether to set the inverse association
     *            or not
     * @throws LinkageException
     */
    public void setSvTapStep(
            SvTapStep svTapStepValue,
            boolean setInverse) throws LinkageException {
        this.svTapStep = svTapStepValue;
        this.currentBitset.set(4);
        if (setInverse) {
            
            if (svTapStepValue != null) {
                svTapStepValue.setTapChanger(this, false);
            }
        }
    }
    
    /**
     * Utility to return the "stepVoltageIncrement" value
     *
     * @return the value of the attribute "stepVoltageIncrement"
     */
    public float getStepVoltageIncrement() {
        return this.stepVoltageIncrement;
    }

    /**
     * Utility to set the "stepVoltageIncrement" value
     *
     * @param stepVoltageIncrementValue 
     *            value to set
     */
    public void setStepVoltageIncrement(float stepVoltageIncrementValue) {
        this.stepVoltageIncrement = stepVoltageIncrementValue;
        this.currentBitset.set(5);
    }

    /**
     * Utility to test if the value of "stepVoltageIncrement" has been set
     *
     * @return boolean
     *            if true the attribute "stepVoltageIncrement" is already set
     *            if false isn't yet
     */
    public boolean stepVoltageIncrementIsSet() {
        return this.currentBitset.get(5);
     }
    
    /**
     * Utility to return the "lowStep" value
     *
     * @return the value of the attribute "lowStep"
     */
    public int getLowStep() {
        return this.lowStep;
    }

    /**
     * Utility to set the "lowStep" value
     *
     * @param lowStepValue 
     *            value to set
     */
    public void setLowStep(int lowStepValue) {
        this.lowStep = lowStepValue;
        this.currentBitset.set(6);
    }

    /**
     * Utility to test if the value of "lowStep" has been set
     *
     * @return boolean
     *            if true the attribute "lowStep" is already set
     *            if false isn't yet
     */
    public boolean lowStepIsSet() {
        return this.currentBitset.get(6);
     }


    /**
     * Factory of the class
     *
     * @param id
     *            id of the class TapChanger to create
     * @return the class created
     */
    public static TapChanger create(final String id) {
        TapChanger newTapChanger = new TapChanger();
        newTapChanger.setId(id);
        return newTapChanger;
    }

    /**
     * Utility to "clear" the content of a class when a subset is invalidated
     *
     * @param subset subset to clean
     */
    @Override
    public void clearContent(Subset subset) {

        // First of all, we clear the associations:
        this.clearAssociations(subset);


        // The function has been called by a concrete class :
        // the checking has already been done so we can clear everything !

        this.currentBitset.clear(0);
        this.currentBitset.clear(1);
        this.currentBitset.clear(2);
        this.currentBitset.clear(5);
        this.currentBitset.clear(6);

        super.clearContent(subset);
    }

    /**
     * Utility to read an attribute
     * This function is called by the CIMModel
     *
     * @param class_name
     *            the read name of class
     * @param attr_name
     *            the read name of attribute
     * @param value
     *            the read value of the attribute
     * @param model
     *            the interface to the model this class belongs to
     * @throws InterpretationException
     */
    @Override
    public void readAttribute(final String class_name, final String attr_name,
                              final String value, CIMModel model) throws InterpretationException {

        if (class_name.equals("TapChanger")) {

        if (attr_name.equals("highStep")) {
            int typedValue;
            if (!value.isEmpty()) {

                try {
                    typedValue = Integer.parseInt(value);
                } catch(NumberFormatException e) {
                    StringBuilder errorMessage
                            = new StringBuilder ("The attribute");
                    errorMessage
                            .append("highStep in class ");
                    errorMessage
                            .append("TapChanger is supposed to");
                    errorMessage
                            .append(" be an Integer but has not");
                    errorMessage
                            .append(" the expected NumberFormat");
                    throw new InterpretationException(errorMessage
                            .toString());
                }

            } else {
                StringBuilder errorMessage
                        = new StringBuilder("The field of int");
                errorMessage
                        .append(" in TapChanger was found empty ");
                LOGGER.error(errorMessage.toString());
                throw new InterpretationException(errorMessage.toString());
            }

            this.setHighStep(typedValue);
            return;
        }

        if (attr_name.equals("neutralU")) {
            float typedValue;
            if (!value.isEmpty()) {

                try {
                            if (value.equalsIgnoreCase("NaN")) {
                                throw new NumberFormatException();
                            }
                            typedValue = Float
                                    .parseFloat(value);
                } catch(NumberFormatException e) {
                    StringBuilder errorMessage
                            = new StringBuilder ("The attribute");
                    errorMessage
                            .append("neutralU in class ");
                    errorMessage
                            .append("TapChanger is supposed to");
                    errorMessage
                            .append(" be an Integer but has not");
                    errorMessage
                            .append(" the expected NumberFormat");
                    throw new InterpretationException(errorMessage
                            .toString());
                }

            } else {
                StringBuilder errorMessage
                        = new StringBuilder("The field of float");
                errorMessage
                        .append(" in TapChanger was found empty ");
                LOGGER.error(errorMessage.toString());
                throw new InterpretationException(errorMessage.toString());
            }
            this.setNeutralU(typedValue);
            return;
        }

        if (attr_name.equals("neutralStep")) {
            int typedValue;
            if (!value.isEmpty()) {

                try {
                    typedValue = Integer.parseInt(value);
                } catch(NumberFormatException e) {
                    StringBuilder errorMessage
                            = new StringBuilder ("The attribute");
                    errorMessage
                            .append("neutralStep in class ");
                    errorMessage
                            .append("TapChanger is supposed to");
                    errorMessage
                            .append(" be an Integer but has not");
                    errorMessage
                            .append(" the expected NumberFormat");
                    throw new InterpretationException(errorMessage
                            .toString());
                }

            } else {
                StringBuilder errorMessage
                        = new StringBuilder("The field of int");
                errorMessage
                        .append(" in TapChanger was found empty ");
                LOGGER.error(errorMessage.toString());
                throw new InterpretationException(errorMessage.toString());
            }

            this.setNeutralStep(typedValue);
            return;
        }

        if (attr_name.equals("stepVoltageIncrement")) {
            float typedValue;
            if (!value.isEmpty()) {

                try {
                            if (value.equalsIgnoreCase("NaN")) {
                                throw new NumberFormatException();
                            }
                            typedValue = Float
                                    .parseFloat(value);
                } catch(NumberFormatException e) {
                    StringBuilder errorMessage
                            = new StringBuilder ("The attribute");
                    errorMessage
                            .append("stepVoltageIncrement in class ");
                    errorMessage
                            .append("TapChanger is supposed to");
                    errorMessage
                            .append(" be an Integer but has not");
                    errorMessage
                            .append(" the expected NumberFormat");
                    throw new InterpretationException(errorMessage
                            .toString());
                }

            } else {
                StringBuilder errorMessage
                        = new StringBuilder("The field of float");
                errorMessage
                        .append(" in TapChanger was found empty ");
                LOGGER.error(errorMessage.toString());
                throw new InterpretationException(errorMessage.toString());
            }
            this.setStepVoltageIncrement(typedValue);
            return;
        }

        if (attr_name.equals("lowStep")) {
            int typedValue;
            if (!value.isEmpty()) {

                try {
                    typedValue = Integer.parseInt(value);
                } catch(NumberFormatException e) {
                    StringBuilder errorMessage
                            = new StringBuilder ("The attribute");
                    errorMessage
                            .append("lowStep in class ");
                    errorMessage
                            .append("TapChanger is supposed to");
                    errorMessage
                            .append(" be an Integer but has not");
                    errorMessage
                            .append(" the expected NumberFormat");
                    throw new InterpretationException(errorMessage
                            .toString());
                }

            } else {
                StringBuilder errorMessage
                        = new StringBuilder("The field of int");
                errorMessage
                        .append(" in TapChanger was found empty ");
                LOGGER.error(errorMessage.toString());
                throw new InterpretationException(errorMessage.toString());
            }

            this.setLowStep(typedValue);
            return;
        }
            StringBuilder errorMessage = new StringBuilder("The attribute \"");
            errorMessage.append(attr_name);
            errorMessage.append("\" in class \"");
            errorMessage.append(class_name);
            errorMessage.append("\" could not be found in the model !");
            throw new InterpretationException(errorMessage.toString());
        } else {
            super.readAttribute(class_name, attr_name, value, model);
        }
    }

    /**
     * Utility to read a reference to a resource
     * This function is called by the CIMModel
     *
     * @param class_name
     *            the read name of class
     * @param resource_name
     *            the read name of the associated resource
     * @param id
     *            the id of the associated resource
     * @param model
     *            the model this class belongs to
     * @throws InterpretationException
     */
    @Override
    public void readResource(final String class_name,
            final String resource_name, final String id, CIMModel model)
            throws InterpretationException, LinkageException {
        if (class_name.equals("TapChanger")) {
        if (resource_name.equals("RegulatingControl")) {
            idRegulatingControl = id.substring(1);

            if (!super.isAddedToUnresolved()) {
                model.addUnresolved();
                super.addToUnresolved();
            }
        }
        if (resource_name.equals("SvTapStep")) {
            idSvTapStep = id.substring(1);

            if (!super.isAddedToUnresolved()) {
                model.addUnresolved();
                super.addToUnresolved();
            }
        }
        } else {
            super.readResource(class_name, resource_name, id, model);
        }
    }

    /**
     * Utility to write the content into the CIM XML format
     *
     * @param writeID
     *            specifies whether to write the XML "id" attribute (this is used for describing concrete class)
     * @param xmlsw
     *            XMLStreamWriter where are stored the elements to write
     */
    @Override
    public void write(XMLStreamWriter xmlsw, boolean writeID) {

        /*
         * In previous versions, we used to check the consistency
         * of the instance in the context but this task is now
         * performed by the model before attempting to write.
         * Therefore each instance can now be written even if
         * it is not consistent !
         */

        writeClass(xmlsw);
        super.write(xmlsw, false);
        return;
    }

    /**
     * Utility to write the content this class into the CIM/XML format according
     * to a subset
     *
     * @param subset
     *            the subset defining the context in which to write this class
     * @param writeID
     *            specifies whether to write the XML "id" attribute (this is used for describing concrete class)
     * @param xmlsw
     *            the stream in which are stored the elements to write
     */
    @Override
    public void write(XMLStreamWriter xmlsw, final Subset subset,
            boolean writeID) {

        /*
         * In previous versions, we used to check the consistency
         * of the instance in the context but this task is now
         * performed by the model before attempting to write.
         * Therefore each instance can now be written even if
         * it is not consistent !
         */

        // abstract class
        writeClass(xmlsw);
        super.write(xmlsw, subset, false);
        return;
    }

    /**
     * Utility to resolve the links at the end of parsing
     *
     * @param model
     *            the model this class belongs to
     * @param boundaryModel
     *            the model that gather data about the boundarySet, used
     *            as a resource force links resolving
     * @throws Linkage Exception
     */
    @Override
    public void resolveLinks(CIMModel model, CIMModel boundaryModel) throws LinkageException {
        if (idRegulatingControl != null) {
            RegulatingControl attributeToSet =
                    model.searchRegulatingControl
                    (idRegulatingControl);

            if (attributeToSet != null) {
                boolean setInverse = true;

                try {
                    this.setRegulatingControl(attributeToSet, setInverse);
                } catch(LinkageException e) {
                   LOGGER.error(e.toString(), e);
                    throw new LinkageException(e.getMessage());
                }
            } else if (boundaryModel != null) {
                RegulatingControl attributeToSetFromBoundary = boundaryModel.searchRegulatingControl(idRegulatingControl);
                if(attributeToSetFromBoundary != null) {
                    attributeToSetFromBoundary.setFromBoundary(true);
                    try {
                        model.createRegulatingControl(idRegulatingControl, attributeToSetFromBoundary);
                    } catch (InterpretationException e) {
                       LOGGER.error(e.toString(), e);
                    }
                    boolean setInverse = true;
                    try {
                        this.setRegulatingControl(attributeToSetFromBoundary, setInverse);
                    } catch(LinkageException e) {
                       LOGGER.error(e.toString(), e);
                        throw new LinkageException(e.getMessage());
                    }
                    attributeToSetFromBoundary.resolveLinks(model, boundaryModel);
                } else {
                    StringBuilder errorMessage = new StringBuilder(
                            "Could not find the reference to object of type \"RegulatingControl\" and id \"");
                    errorMessage.append(idRegulatingControl);
                    errorMessage.append("\" in \"TapChanger\" of id \"");
                    errorMessage.append(this.getId());
                    errorMessage.append("\" !");
                    throw new LinkageException(errorMessage.toString());
                }
            } else {
                StringBuilder errorMessage = new StringBuilder(
                        "Could not find the reference to object of type \"RegulatingControl\" and id \"");
                errorMessage.append(idRegulatingControl);
                errorMessage.append("\" in \"TapChanger\" of id \"");
                errorMessage.append(this.getId());
                errorMessage.append("\" !");
                throw new LinkageException(errorMessage.toString());
            }
        }


        if (idSvTapStep != null) {
            SvTapStep attributeToSet =
                    model.searchSvTapStep
                    (idSvTapStep);

            if (attributeToSet != null) {
                boolean setInverse = true;

                try {
                    this.setSvTapStep(attributeToSet, setInverse);
                } catch(LinkageException e) {
                   LOGGER.error(e.toString(), e);
                    throw new LinkageException(e.getMessage());
                }
            } else if (boundaryModel != null) {
                SvTapStep attributeToSetFromBoundary = boundaryModel.searchSvTapStep(idSvTapStep);
                if(attributeToSetFromBoundary != null) {
                    attributeToSetFromBoundary.setFromBoundary(true);
                    try {
                        model.createSvTapStep(idSvTapStep, attributeToSetFromBoundary);
                    } catch (InterpretationException e) {
                       LOGGER.error(e.toString(), e);
                    }
                    boolean setInverse = true;
                    try {
                        this.setSvTapStep(attributeToSetFromBoundary, setInverse);
                    } catch(LinkageException e) {
                       LOGGER.error(e.toString(), e);
                        throw new LinkageException(e.getMessage());
                    }
                    attributeToSetFromBoundary.resolveLinks(model, boundaryModel);
                } else {
                    StringBuilder errorMessage = new StringBuilder(
                            "Could not find the reference to object of type \"SvTapStep\" and id \"");
                    errorMessage.append(idSvTapStep);
                    errorMessage.append("\" in \"TapChanger\" of id \"");
                    errorMessage.append(this.getId());
                    errorMessage.append("\" !");
                    throw new LinkageException(errorMessage.toString());
                }
            } else {
                StringBuilder errorMessage = new StringBuilder(
                        "Could not find the reference to object of type \"SvTapStep\" and id \"");
                errorMessage.append(idSvTapStep);
                errorMessage.append("\" in \"TapChanger\" of id \"");
                errorMessage.append(this.getId());
                errorMessage.append("\" !");
                throw new LinkageException(errorMessage.toString());
            }
        }


        super.resolveLinks(model, boundaryModel);
        removeFromUnresolved();
    }

    /**
     * Utility to check whether this class is consistent according to a subset
     *
     * @param subset
     *            the subset defining the context in which to check whether this class is consistent
     * @return a ConsistencyCheck instance whose boolean attribute (consistent)
     *         indicates if this class is consistent and whose String attribute
     *         (message)
     *         indicates why this class is not consistent if it is not
     */
    @Override
    public ConsistencyCheck modelConsistency(final Subset subset) {
        BitSet intersection = new BitSet(this.minBitsets.get(subset).length());
        intersection.or(this.minBitsets.get(subset));
        // we create a copy of minBitsets.get(subset)
        intersection.and(this.currentBitset);
        boolean consistent = (this.minBitsets.get(subset).equals(intersection));
        StringBuilder message = new StringBuilder("");

        if (!consistent) {
            message.append(getMessageForConsistency(this.minBitsets.get(subset)));
        }
        // consistent = (super.modelConsistency().getLeft()) ? (consistent &&
        // (true)):(consistent && (false))
        // message.append((super.modelConsistency(subset)).getRight());

        if (super.modelConsistency().isConsistent()) {
            consistent = consistent && (true);
            message.append((super.modelConsistency(subset)).getMessage());
        } else {
            consistent = consistent && (false);
            message.append((super.modelConsistency(subset)).getMessage());
        }

        return new ConsistencyCheck(consistent, message.toString());
    }

    /**
     * Utility to check whether this class is consistent in a "merged" context
     *
     * @return a ConsistencyCheck instance whose boolean attribute (consistent)
     *         indicates if this class is consistent and whose String attribute
     *         (message)
     *         indicates why this class is not consistent if it is not
     */
    @Override
    public ConsistencyCheck modelConsistency() {
        BitSet intersection = new BitSet(this.minBitset.length());
        intersection.or(this.minBitset);
        // we create a copy of minBitSet
        intersection.and(this.currentBitset);
        boolean consistent = (this.minBitset.equals(intersection));
        StringBuilder message = new StringBuilder("");

        if (!consistent) {
        message.append(getMessageForConsistency(this.minBitset));
        }
        // consistent = (super.modelConsistency().getLeft()) ? (consistent &&
        // (true)):(consistent && (false))
        // message += (super.modelConsistency(subset)).getRight();

        if (super.modelConsistency().isConsistent()) {
            consistent = consistent && (true);
            message.append((super.modelConsistency()).getMessage());
        } else {
            consistent = consistent && (false);
            message.append((super.modelConsistency()).getMessage());
        }

        return new ConsistencyCheck(consistent, message.toString());
    }

    /**
     * Utility to copy the "base" of an other instance of the same class
     * This utility does not copy the associations with other instances from
     * the instance to copy
     *
     * @param otherTapChanger
     *            the instance to copy
     */
    public void copyBase(final TapChanger otherTapChanger) {
        int newhighStep;
        // assigning primitive type :
        if (otherTapChanger.currentBitset.get(0)) {
            newhighStep = otherTapChanger.getHighStep();
            this.setHighStep(newhighStep);
          }
        float newneutralU;
        // assigning primitive type :
        if (otherTapChanger.currentBitset.get(1)) {
            newneutralU = otherTapChanger.getNeutralU();
            this.setNeutralU(newneutralU);
          }
        int newneutralStep;
        // assigning primitive type :
        if (otherTapChanger.currentBitset.get(2)) {
            newneutralStep = otherTapChanger.getNeutralStep();
            this.setNeutralStep(newneutralStep);
          }


        float newstepVoltageIncrement;
        // assigning primitive type :
        if (otherTapChanger.currentBitset.get(5)) {
            newstepVoltageIncrement = otherTapChanger.getStepVoltageIncrement();
            this.setStepVoltageIncrement(newstepVoltageIncrement);
          }
        int newlowStep;
        // assigning primitive type :
        if (otherTapChanger.currentBitset.get(6)) {
            newlowStep = otherTapChanger.getLowStep();
            this.setLowStep(newlowStep);
          }
        // Memory allocation has done successfully !
        // Dropping "old" objects...
        // This part may change : we do nothing to allow the user to access
        // object by their id from the global model.

        if (otherTapChanger.currentBitset.get(3)) {
            RegulatingControl regulatingControlAssociation = otherTapChanger.getRegulatingControl();

            //this.idRegulatingControl = (regulatingControlAssociation != null) ? regulatingControlAssociation.getId() : "";
            if (regulatingControlAssociation != null) {
                this.idRegulatingControl = regulatingControlAssociation.getId();
                // the proper bit will be set when the setter is called
            } else {
                this.idRegulatingControl = "";
            }
        }

        if (otherTapChanger.currentBitset.get(4)) {
            SvTapStep svTapStepAssociation = otherTapChanger.getSvTapStep();

            //this.idSvTapStep = (svTapStepAssociation != null) ? svTapStepAssociation.getId() : "";
            if (svTapStepAssociation != null) {
                this.idSvTapStep = svTapStepAssociation.getId();
                // the proper bit will be set when the setter is called
            } else {
                this.idSvTapStep = "";
            }
        }

        // TODO : Call the parent copy constructor instead ?
        super.copyBase(otherTapChanger);

    }

    /**
     * Utility to return the content of this class into the CIM XML format
     *
     * @param xmlsw
     *            the stream in which are stored the elements to write
     */
    private void writeClass(XMLStreamWriter xmlsw) {

        if (currentBitset.get(0)) {

        try {
            // xmlsw.writeCharacters("\t");
            xmlsw.writeStartElement(CIMURI.CIMURI,
                    "TapChanger.highStep");
            xmlsw.writeCharacters(String.valueOf(getHighStep()));
            xmlsw.writeEndElement();
            // xmlsw.writeCharacters("\n");
        } catch(XMLStreamException e) {
            StringBuilder errorMessage = new StringBuilder(
                    "Error while trying to write the value of the attribute ");
            errorMessage.append("HighStep");
            errorMessage.append(" in class ");
            errorMessage.append("TapChanger ");
            errorMessage.append("which ID has been initialized to : ");
            errorMessage.append(getId());
            LOGGER.error(errorMessage.toString());
            LOGGER.error(e.toString(), e);
        }
        }

        if (currentBitset.get(1)) {

        try {
            // xmlsw.writeCharacters("\t");
            xmlsw.writeStartElement(CIMURI.CIMURI,
                    "TapChanger.neutralU");
            xmlsw.writeCharacters(String.valueOf(getNeutralU()));
            xmlsw.writeEndElement();
            // xmlsw.writeCharacters("\n");
        } catch(XMLStreamException e) {
            StringBuilder errorMessage = new StringBuilder(
                    "Error while trying to write the value of the attribute ");
            errorMessage.append("NeutralU");
            errorMessage.append(" in class ");
            errorMessage.append("TapChanger ");
            errorMessage.append("which ID has been initialized to : ");
            errorMessage.append(getId());
            LOGGER.error(errorMessage.toString());
            LOGGER.error(e.toString(), e);
        }
        }

        if (currentBitset.get(2)) {

        try {
            // xmlsw.writeCharacters("\t");
            xmlsw.writeStartElement(CIMURI.CIMURI,
                    "TapChanger.neutralStep");
            xmlsw.writeCharacters(String.valueOf(getNeutralStep()));
            xmlsw.writeEndElement();
            // xmlsw.writeCharacters("\n");
        } catch(XMLStreamException e) {
            StringBuilder errorMessage = new StringBuilder(
                    "Error while trying to write the value of the attribute ");
            errorMessage.append("NeutralStep");
            errorMessage.append(" in class ");
            errorMessage.append("TapChanger ");
            errorMessage.append("which ID has been initialized to : ");
            errorMessage.append(getId());
            LOGGER.error(errorMessage.toString());
            LOGGER.error(e.toString(), e);
        }
        }

        if (currentBitset.get(3)) {
        if (idRegulatingControl != null) {
            try {
                // xmlsw.writeCharacters("\t");
                xmlsw.writeEmptyElement(CIMURI.CIMURI,
                        "TapChanger.RegulatingControl");
                xmlsw.writeAttribute(CIMModel.rdfURI, "resource", "#"
                        + idRegulatingControl);
                // xmlsw.writeCharacters("\n");
            } catch(XMLStreamException e) {
                StringBuilder errorMessage = new StringBuilder(
                        "Error while trying to write the resource attribute ");
                errorMessage.append("RegulatingControl");
                errorMessage.append(" in class ");
                errorMessage.append("TapChanger ");
                errorMessage.append("which ID has been initialized to : ");
                errorMessage.append(getId());
                LOGGER.error(errorMessage.toString());
                LOGGER.error(e.toString(), e);
            }
        }
        }

        if (currentBitset.get(4)) {

    /*
     * Careful here : we may write an association "twice" if
     * the association is 1..1 one and if
     * both ends belong to the same subset
     */

        if (idSvTapStep != null &&
                !idSvTapStep.isEmpty()) {

            try {
                // xmlsw.writeCharacters("\t");
                xmlsw.writeEmptyElement(CIMURI.CIMURI,
                        "TapChanger.SvTapStep");
                xmlsw.writeAttribute(CIMModel.rdfURI, "resource", "#"
                        + idSvTapStep);
                // xmlsw.writeCharacters("\n");
            } catch(XMLStreamException e) {
                StringBuilder errorMessage = new StringBuilder(
                        "Error while trying to write the resource attribute ");
                errorMessage.append("SvTapStep");
                errorMessage.append(" in class ");
                errorMessage.append("TapChanger ");
                errorMessage.append("which ID has been initialized to : ");
                errorMessage.append(getId());
                LOGGER.error(errorMessage.toString());
                LOGGER.error(e.toString(), e);
            }
        }
        }

        if (currentBitset.get(5)) {

        try {
            // xmlsw.writeCharacters("\t");
            xmlsw.writeStartElement(CIMURI.CIMURI,
                    "TapChanger.stepVoltageIncrement");
            xmlsw.writeCharacters(String.valueOf(getStepVoltageIncrement()));
            xmlsw.writeEndElement();
            // xmlsw.writeCharacters("\n");
        } catch(XMLStreamException e) {
            StringBuilder errorMessage = new StringBuilder(
                    "Error while trying to write the value of the attribute ");
            errorMessage.append("StepVoltageIncrement");
            errorMessage.append(" in class ");
            errorMessage.append("TapChanger ");
            errorMessage.append("which ID has been initialized to : ");
            errorMessage.append(getId());
            LOGGER.error(errorMessage.toString());
            LOGGER.error(e.toString(), e);
        }
        }

        if (currentBitset.get(6)) {

        try {
            // xmlsw.writeCharacters("\t");
            xmlsw.writeStartElement(CIMURI.CIMURI,
                    "TapChanger.lowStep");
            xmlsw.writeCharacters(String.valueOf(getLowStep()));
            xmlsw.writeEndElement();
            // xmlsw.writeCharacters("\n");
        } catch(XMLStreamException e) {
            StringBuilder errorMessage = new StringBuilder(
                    "Error while trying to write the value of the attribute ");
            errorMessage.append("LowStep");
            errorMessage.append(" in class ");
            errorMessage.append("TapChanger ");
            errorMessage.append("which ID has been initialized to : ");
            errorMessage.append(getId());
            LOGGER.error(errorMessage.toString());
            LOGGER.error(e.toString(), e);
        }
        }

        return;
    }

    /**
     * Utility in charge of creating the message when the class is not
     * consistent within a specific context
     *
     * @param minBitset
     *            bitset describing which CIM attributes of this class have
     *            to be set so that it is consistent within a
     *            specific subset context
     * @return the message explaining what is not consistent
     */
    private String getMessageForConsistency(final BitSet minBitset) {

        StringBuilder message = new StringBuilder(
                "Instance of \"TapChanger\" of id \"");
        message.append(this.getId());
        message.append("\" is not consistent in this context:\n");
        /*
         * XOR and then AND
         * The result is :
         * "1" : has not been set and need to be
         * "0" : has been set or is not mandatory
         */

        BitSet isNotSet = new BitSet(minBitset.length());
        isNotSet.or(minBitset);
        // we create a copy of minBitset
        isNotSet.xor(this.currentBitset);
        isNotSet.and(minBitset);

        if (isNotSet.get(0)) {
            message.append("\t\"highStep\" needs to be set\n");
        }

        if (isNotSet.get(1)) {
            message.append("\t\"neutralU\" needs to be set\n");
        }

        if (isNotSet.get(2)) {
            message.append("\t\"neutralStep\" needs to be set\n");
        }

        if (isNotSet.get(3)) {
            message.append("\t\"RegulatingControl\" needs to be set\n");
        }

        if (isNotSet.get(4)) {
            message.append("\t\"SvTapStep\" needs to be set\n");
        }

        if (isNotSet.get(5)) {
            message.append("\t\"stepVoltageIncrement\" needs to be set\n");
        }

        if (isNotSet.get(6)) {
            message.append("\t\"lowStep\" needs to be set\n");
        }
        return message.toString();
    }

    /**
     * Copy constructor
     * The associations with other objects are not copied
     *
     * @param TapChanger
     *            the reference to the class to copy
     * @return the class constructed
     */
    private TapChanger(final TapChanger otherTapChanger) {
        // TODO : check exception safe
        this.copyBase(otherTapChanger);
    }

   /**
    * Constructor of the class TapChanger
    */
    protected TapChanger() {

         // This class is not "concrete" : it is not supposed to be instanciated directly
         // subset is not set : it will be set by subclass
        // attribute "highStep" is mandatory :
        this.minBitset.set(0);
        // attribute "neutralU" is mandatory :
        this.minBitset.set(1);
        // attribute "neutralStep" is mandatory :
        this.minBitset.set(2);
        // attribute "RegulatingControl" is optional :
        this.minBitset.clear(3);
        // attribute "SvTapStep" is optional :
        this.minBitset.clear(4);
        // attribute "stepVoltageIncrement" is optional :
        this.minBitset.clear(5);
        // attribute "lowStep" is mandatory :
        this.minBitset.set(6);
        // every subset has the same minsubset :
        this.minBitsets.put(Subset.StateVariables, this.minBitset);
        // every subset has the same minsubset :
        this.minBitsets.put(Subset.Topology, this.minBitset);
        // every subset has the same minsubset :
        this.minBitsets.put(Subset.Equipment, this.minBitset);
    }



    /**
     * Utility to clear the associations of this class belonging to a
     * specific subset
     *
     * @param subset
     *            the subset from which to clear the associations of this class
     */
    @Override
    protected void clearAssociations(final Subset subset) {

        switch (subset) {
            case StateVariables: {
                // reset the Reference
                svTapStep = null;
                idSvTapStep = "";
                this.currentBitset.clear(4);
                super.clearAssociations(subset);
                break;
            }
            case Topology: {
                super.clearAssociations(subset);
                break;
            }
            case Equipment: {
                // reset the Reference
                regulatingControl = null;
                idRegulatingControl = "";
                this.currentBitset.clear(3);
                super.clearAssociations(subset);
                break;
            }
            default: // nothing to clear
        }
    }

    /**
     * Utility returning a copy of the "base" of this instance
     * This utility does not copy the associations with other instances
     *
     * @return a clone of this instance
     */
    public TapChanger clone() {
        TapChanger newInstance = new TapChanger(this);
        TapChanger newInstanceSP = newInstance;
        return newInstanceSP;
    }

}



