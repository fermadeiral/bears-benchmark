/**
 * Copyright (C) 2014-2018 LinkedIn Corp. (pinot-core@linkedin.com)
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.linkedin.pinot.core.segment.creator;

import com.linkedin.pinot.core.common.Constants;
import com.linkedin.pinot.core.data.partition.PartitionFunction;
import java.util.List;
import org.apache.commons.lang.math.IntRange;
import org.apache.commons.lang3.ArrayUtils;


public class ColumnIndexCreationInfo {
  private final boolean createDictionary;
  private final ForwardIndexType forwardIndexType;
  private final InvertedIndexType invertedIndexType;
  private final boolean isAutoGenerated;
  private final Object defaultNullValue;
  private final ColumnStatistics columnStatistics;

  public ColumnIndexCreationInfo(ColumnStatistics columnStatistics, boolean createDictionary, ForwardIndexType forwardIndexType, InvertedIndexType invertedIndexType,
      boolean isAutoGenerated, Object defaultNullValue) {
    this.columnStatistics = columnStatistics;
    this.createDictionary = createDictionary;
    this.forwardIndexType = forwardIndexType;
    this.invertedIndexType = invertedIndexType;
    this.isAutoGenerated = isAutoGenerated;
    this.defaultNullValue = defaultNullValue;
  }

  public boolean isCreateDictionary() {
    return createDictionary;
  }

  public Object getMin() {
    return columnStatistics.getMinValue();
  }

  public Object getMax() {
    return columnStatistics.getMaxValue();
  }

  public Object getSortedUniqueElementsArray() {
    return columnStatistics.getUniqueValuesSet();
  }

  public int getDistinctValueCount() {
    Object uniqueValArray = columnStatistics.getUniqueValuesSet();
    if (uniqueValArray == null) {
      return Constants.UNKNOWN_CARDINALITY;
    }
    return ArrayUtils.getLength(uniqueValArray);
  }

  public ForwardIndexType getForwardIndexType() {
    return forwardIndexType;
  }

  public InvertedIndexType getInvertedIndexType() {
    return invertedIndexType;
  }

  public boolean isSorted() {
    return columnStatistics.isSorted();
  }

  public boolean hasNulls() {
    return columnStatistics.hasNull();
  }

  public int getTotalNumberOfEntries() {
    return columnStatistics.getTotalNumberOfEntries();
  }

  public int getMaxNumberOfMultiValueElements() {
    return columnStatistics.getMaxNumberOfMultiValues();
  }

  public boolean isAutoGenerated() {
    return isAutoGenerated;
  }

  public Object getDefaultNullValue() {
    return defaultNullValue;
  }

  public int getLengthOfLongestEntry() {
    return columnStatistics.getLengthOfLargestElement();
  }

  public List<IntRange> getPartitionRanges() {
    return columnStatistics.getPartitionRanges();
  }

  public PartitionFunction getPartitionFunction() {
    return columnStatistics.getPartitionFunction();
  }

  public int getNumPartitions() {
    return columnStatistics.getNumPartitions();
  }

  public boolean isFixedLength() {
    return columnStatistics.getLengthOfShortestElement() == columnStatistics.getLengthOfLargestElement();
  }
}
