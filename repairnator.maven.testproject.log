[INFO] Scanning for projects...
[INFO] ------------------------------------------------------------------------
[INFO] Reactor Build Order:
[INFO] 
[INFO] Ystia Orchestrator PaaS provider for Alien4Cloud
[INFO] Ystia Orchestrator PaaS provider for Alien4Cloud :: Plugin
[INFO] Ystia Orchestrator PaaS provider for Alien4Cloud :: Distribution
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Ystia Orchestrator PaaS provider for Alien4Cloud 3.1.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Ystia Orchestrator PaaS provider for Alien4Cloud :: Plugin 3.1.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ alien4cloud-yorc-plugin ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 29 resources
[INFO] 
[INFO] --- maven-compiler-plugin:2.3.2:compile (default-compile) @ alien4cloud-yorc-plugin ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ alien4cloud-yorc-plugin ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 4 resources
[INFO] 
[INFO] --- maven-compiler-plugin:2.3.2:testCompile (default-testCompile) @ alien4cloud-yorc-plugin ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- maven-surefire-plugin:2.14.1:test (default-test) @ alien4cloud-yorc-plugin ---
[INFO] Surefire report directory: /root/workspace/ystia/yorc-a4c-plugin/436181135/alien4cloud-yorc-plugin/target/surefire-reports

-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running org.ystia.yorc.alien4cloud.plugin.service.ToscaExportersTest
[]
[]
[]
tosca_definitions_version: alien_dsl_2_0_0

metadata:
  template_name: org.yorc.samples.bash
  template_version: 1.0.0-SNAPSHOT
  template_author: yorc

description: |
  This is a sample used to test parsing and formatting
  of a component into a DSL that matches Yorc one.

repositories:
  mydocker_repo:
    type: docker
    url: "http://custom.repo.com"
    credential:
      protocol: test
      token_type: password
      user: opjsdpojds
      token: test

data_types:
  tosca.datatypes.Root:
    description: "The TOSCA root Data Type all other TOSCA base Data Types derive from."
  tosca.datatypes.Credential:
    description: "The Credential type is a complex TOSCA data Type used when describing authorization credentials used to access network accessible resources."
    derived_from: tosca.datatypes.Root
    properties:
      protocol:
        type: string
        description: "The optional protocol name."
        required: false
      token_type:
        type: string
        description: "The required token type."
        default: password
      token:
        type: string
        description: "The required token used as a credential for authorization or access to a networked resource."
      keys:
        type: map
        description: "The optional list of protocol-specific keys or assertions."
        required: false
        entry_schema:
          type: string
      user:
        type: string
        description: "The optional user (name or ID) used for non-token based credentials."
        required: false

artifact_types:
  tosca.artifacts.Root:
    description: "root type"
  tosca.artifacts.Implementation.Bash:
    description: "Script artifact for the Unix Bash shell"
    derived_from: tosca.artifacts.Root
    mime_type: "application/x-sh"
    file_ext: [sh, bash]

capability_types:
  tosca.capabilities.Root:
    description: "The TOSCA Artifact Type all other TOSCA Artifact Types derive from"
  tosca.capabilities.Test:
    description: "The TOSCA Artifact Type all other TOSCA Artifact Types derive from"
    derived_from: tosca.capabilities.Root
    valid_source_types: [MyType, OtherType]
  tosca.capabilities.Endpoint:
    description: "This is the default TOSCA type that should be used or extended to define a network endpoint capability. This includes the information to express a basic endpoint with a single port or a complex endpoint with multiple ports. By default the Endpoint is assumed to represent an address on a private network unless otherwise specified."
    derived_from: tosca.capabilities.Root
    properties:
      protocol:
        type: string
        description: "The name of the protocol (i.e., the protocol prefix) that the endpoint accepts (any OSI Layer 4-7 protocols) Examples: http, https, ftp, tcp, udp, etc."
        default: tcp
      port:
        type: integer
        description: "The optional port of the endpoint."
        required: false
      secure:
        type: boolean
        description: "Requests for the endpoint to be secure and use credentials supplied on the ConnectsTo relationship."
        default: false
      url_path:
        type: string
        description: "The optional URL path of the endpoint’s address if applicable for the protocol."
        required: false
      port_name:
        type: string
        description: "The optional name (or ID) of the network port this endpoint should be bound to."
        required: false
      network_name:
        type: string
        description: "The optional name (or ID) of the network this endpoint should be bound to. network_name: PRIVATE | PUBLIC |<network_name> | <network_id>"
        required: false
        default: PRIVATE
      initiator:
        type: string
        description: "The optional indicator of the direction of the connection."
        default: source
    attributes:
      ip_address:
        type: string
        description: "This is the IP address as propagated up by the associated node’s host (Compute) container."

node_types:
  org.yorc.samples.python.Component:
    metadata:
      icon: "/images/python.png"
    description: |
      Sample component to illustrate
      how to implement a Component lifecycle in Python
    derived_from: tosca.nodes.SoftwareComponent
    properties:
      hello_message:
        type: string
        description: "A simple message to print"
        default: "Hello World!"
      outputVar1:
        type: string
        description: "Dummy property used to test operation outputs"
        default: ov1
      outputVar2:
        type: string
        description: "Dummy property used to test operation outputs"
        required: false
        default: ov2
      mapProp:
        type: map
        required: false
        default: 
          m1: v1
          m2: v2
        entry_schema:
          type: string
    attributes:
      resolvedOutput1: { get_operation_output: [SELF, Standard, create, myVar1] }
      resolvedOutput2: { get_operation_output: [SELF, Standard, create, myVar2] }
      cuda_visible_devices:
        type: string
        description: "Coma separated list of visibles GPU devices for the compute."
        default: none
    interfaces:
      custom:
        my_ops:
          inputs:
            myInput: test
            var1: { get_property: [SELF, outputVar1] }
            verbose: 
              type: boolean
              description: "enable verbose output"
              default: false

          implementation: scripts/op.sh
      Standard:
        start:
          inputs:
            msg: { get_property: [SELF, hello_message] }
            debug: true
          implementation:
            file: scripts/start.sh
            type: tosca.artifacts.Implementation.Bash
        create:
          inputs:
            var1: { get_property: [SELF, outputVar1] }
            var2: { get_property: [SELF, outputVar2] }
            debug: true
          implementation: scripts/create.sh
    artifacts:
      myArtifact:
        description: |
          A deployment artifact
          of type bash
        file: somewhere/here.sh
        type: tosca.artifacts.Implementation.Bash
        repository: mydocker_repo
        deploy_path: /a/path/not/used/now
    capabilities:
      myCap:
        type: tosca.capabilities.Endpoint
        description: |
          A very wide
          description
        properties:
          protocol: ssh
          network_name: { get_attribute: [SELF, resolvedOutput1] }
        valid_source_types: ["tosca.nodes.Compute", "tosca:.nodes.Root"]
        occurrences: [1, 2]
      myOtherCap:
        type: tosca.capabilities.Endpoint
    requirements:
      - host:
          capability: tosca.capabilities.Root
          node: tosca.nodes.Root
          relationship: tosca.relationships.Root
      - filesystem_endpoint:
          capability: tosca.capabilities.Root
          relationship: tosca.relationships.Root
          occurrences: [0, 1]
      - shortcut:
          capability: tosca.capabilities.Root

relationship_types:
  tosca.relationships.Root:
    description: "rel root"
  org.yorc.samples.relationships.MyRel:
    metadata:
      icon: "/images/python.png"
    description: "null"
    derived_from: tosca.relationships.Root
    properties:
      hello_message:
        type: string
        description: |
          A simple message to print
          This description is multiline
        default: "Hello World!"
      outputVar1:
        type: string
        description: "Dummy property used to test operation outputs"
        default: ov1
      outputVar2:
        type: string
        description: "Dummy property used to test operation outputs"
        required: false
        default: ov2
    attributes:
      resolvedOutput1: { get_operation_output: [SELF, Standard, create, myVar1] }
      resolvedOutput2: { get_operation_output: [SELF, Standard, create, myVar2] }
      cuda_visible_devices:
        type: string
        description: "Coma separated list of visibles GPU devices for the compute."
        default: none
      a1: { concat: [ lit, { concat: [ { get_attribute: [TARGET, something] }, { concat: [ { get_property: [TARGET, whatever] }, { get_attribute: [TARGET, whatever] }, "!", { get_operation_output: [TARGET, Standard, create, CREATE_OUTPUT] } ] }, "?" ] } ] }
    interfaces:
      Configure:
        pre_configure_source:
          inputs:
            var1: { get_property: [SELF, outputVar1] }
            var2: { get_property: [SELF, outputVar2] }
            var3: { concat: [ lit, { concat: [ { get_attribute: [TARGET, something] }, { concat: [ { get_property: [TARGET, whatever] }, { get_attribute: [TARGET, whatever] }, "!", { get_operation_output: [TARGET, Standard, create, CREATE_OUTPUT] } ] }, "?" ] } ] }
            debug: true
          implementation: scripts/create.sh
        add_target:
          inputs:
            msg: { get_property: [SELF, hello_message] }
            debug: true
          implementation: scripts/start.sh
      custom:
        my_ops:
          inputs:
            myInput: test
            var1: { get_property: [SELF, outputVar1] }
            verbose: 
              type: boolean
              description: "enable verbose output"
              default: false

          implementation: scripts/op.sh
    artifacts:
      myArtifact:
        description: |
          A deployment artifact
          of type bash
        file: somewhere/here.sh
        type: tosca.artifacts.Implementation.Bash
        repository: mydocker_repo
        deploy_path: /a/path/not/used/now

policy_types:
  tosca.policies.Root:
    description: "The TOSCA Policy Type all other TOSCA Policy Types derive from"
  yorc.samples.CustomPolicy:
    metadata:
      d1: var1
    description: "a description"
    derived_from: tosca.policies.Root
    properties:
      protocol:
        type: string
        description: "The name of the protocol (i.e., the protocol prefix) that the endpoint accepts (any OSI Layer 4-7 protocols) Examples: http, https, ftp, tcp, udp, etc."
        default: tcp
    targets: ["tosca.nodes.Root"]
    triggers:
      t1:
        description: "the first trigger"
        event_type: myEvent
        schedule:
          start_time: 2216-04-04-15T00:00:00Z
          end_time: $trigger.timeInterval.endTime
        target_filter:
          node: tosca.nodes.SoftwareComponent
          requirement: host
          capability: myCap
        condition:
          evaluations: 10
          period: 5d
          method: average
          constraints:
            - in_range: [1, 10]
        action: scripts/doIt.sh

Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 21.679 sec

Results :

Tests run: 4, Failures: 0, Errors: 0, Skipped: 0

[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building Ystia Orchestrator PaaS provider for Alien4Cloud :: Distribution 3.1.0-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO] ------------------------------------------------------------------------
[INFO] Reactor Summary:
[INFO] 
[INFO] Ystia Orchestrator PaaS provider for Alien4Cloud ... SUCCESS [  0.287 s]
[INFO] Ystia Orchestrator PaaS provider for Alien4Cloud :: Plugin SUCCESS [ 24.246 s]
[INFO] Ystia Orchestrator PaaS provider for Alien4Cloud :: Distribution SUCCESS [  0.001 s]
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 25.376 s
[INFO] Finished at: 2018-10-03T09:29:38+02:00
[INFO] Final Memory: 26M/609M
[INFO] ------------------------------------------------------------------------
