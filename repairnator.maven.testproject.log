[INFO] Scanning for projects...
[INFO]                                                                         
[INFO] ------------------------------------------------------------------------
[INFO] Building money-transfer-service 0.1
[INFO] ------------------------------------------------------------------------
[INFO] 
[INFO] --- gmavenplus-plugin:1.6.1:addTestSources (default) @ money-transfer-service ---
[INFO] 
[INFO] --- gmavenplus-plugin:1.6.1:addSources (default) @ money-transfer-service ---
[INFO] 
[INFO] --- jacoco-maven-plugin:0.8.2:prepare-agent (prepare-agent) @ money-transfer-service ---
[INFO] argLine set to -javaagent:/root/./workspace/DmitriiSerikov/money-transfer-service/441784509/.m2/org/jacoco/org.jacoco.agent/0.8.2/org.jacoco.agent-0.8.2-runtime.jar=destfile=/root/workspace/DmitriiSerikov/money-transfer-service/441784509/target/jacoco.exec
[INFO] 
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ money-transfer-service ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 2 resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.7.0:compile (default-compile) @ money-transfer-service ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- gmavenplus-plugin:1.6.1:compile (default) @ money-transfer-service ---
[INFO] No sources specified for compilation.  Skipping.
[INFO] 
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ money-transfer-service ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /root/workspace/DmitriiSerikov/money-transfer-service/441784509/src/test/resources
[INFO] 
[INFO] --- maven-compiler-plugin:3.7.0:testCompile (default-testCompile) @ money-transfer-service ---
[INFO] Nothing to compile - all classes are up to date
[INFO] 
[INFO] --- gmavenplus-plugin:1.6.1:compileTests (default) @ money-transfer-service ---
[INFO] Using Groovy 2.5.1 to perform compileTests.
[INFO] Compiled 35 files.
[INFO] 
[INFO] --- maven-surefire-plugin:2.21.0:test (default-test) @ money-transfer-service ---
[INFO] Downloading: https://dl.bintray.com/groovy/maven/org/apache/maven/surefire/surefire-junit4/2.21.0/surefire-junit4-2.21.0.pom
[INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-junit4/2.21.0/surefire-junit4-2.21.0.pom
[INFO] Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-junit4/2.21.0/surefire-junit4-2.21.0.pom (4 KB at 21.8 KB/sec)
[INFO] Downloading: https://dl.bintray.com/groovy/maven/org/apache/maven/surefire/surefire-providers/2.21.0/surefire-providers-2.21.0.pom
[INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-providers/2.21.0/surefire-providers-2.21.0.pom
[INFO] Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-providers/2.21.0/surefire-providers-2.21.0.pom (3 KB at 68.2 KB/sec)
[INFO] Downloading: https://dl.bintray.com/groovy/maven/org/apache/maven/surefire/surefire-junit4/2.21.0/surefire-junit4-2.21.0.jar
[INFO] Downloading: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-junit4/2.21.0/surefire-junit4-2.21.0.jar
[INFO] Downloaded: https://repo.maven.apache.org/maven2/org/apache/maven/surefire/surefire-junit4/2.21.0/surefire-junit4-2.21.0.jar (83 KB at 1020.5 KB/sec)
[INFO] 
[INFO] -------------------------------------------------------
[INFO]  T E S T S
[INFO] -------------------------------------------------------
[INFO] Running com.github.example.controller.AccountControllerSpec
20:06:12.952 [main] INFO  i.m.context.env.DefaultEnvironment - Established active environments: [test]
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 7.444 s - in com.github.example.controller.AccountControllerSpec
[INFO] Running com.github.example.controller.TransactionControllerSpec
20:06:18.288 [main] INFO  i.m.context.env.DefaultEnvironment - Established active environments: [test]
[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.472 s - in com.github.example.controller.TransactionControllerSpec
[INFO] Running com.github.example.dao.impl.InMemoryTransactionDaoSpec
[INFO] Tests run: 17, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.996 s - in com.github.example.dao.impl.InMemoryTransactionDaoSpec
[INFO] Running com.github.example.dao.impl.InMemoryAccountDaoSpec
[INFO] Tests run: 14, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.123 s - in com.github.example.dao.impl.InMemoryAccountDaoSpec
[INFO] Running com.github.example.service.impl.TransactionServiceSpec
[ERROR] Tests run: 9, Failures: 8, Errors: 0, Skipped: 0, Time elapsed: 0.513 s <<< FAILURE! - in com.github.example.service.impl.TransactionServiceSpec
[ERROR] should return not empty collection of transactions when transactions storage returns not empty collection(com.github.example.service.impl.TransactionServiceSpec)  Time elapsed: 0.38 s  <<< FAILURE!
org.spockframework.runtime.ConditionNotSatisfiedError: 
Condition not satisfied:

!result.empty
||      |
|[]     true
false

	at com.github.example.service.impl.TransactionServiceSpec.should return not empty collection of transactions when transactions storage returns not empty collection(TransactionServiceSpec.groovy:63)

[ERROR] should throw exception when transactions storage doesn't contains entity for given id and throws exception(com.github.example.service.impl.TransactionServiceSpec)  Time elapsed: 0.009 s  <<< FAILURE!
org.spockframework.runtime.WrongExceptionThrownError: Expected exception of type 'com.github.example.exception.EntityNotFoundException', but no exception was thrown
	at com.github.example.service.impl.TransactionServiceSpec.should throw exception when transactions storage doesn't contains entity for given id and throws exception(TransactionServiceSpec.groovy:76)

[ERROR] should return transaction by given id when transactions storage contains entity for given id(com.github.example.service.impl.TransactionServiceSpec)  Time elapsed: 0.012 s  <<< FAILURE!
org.spockframework.runtime.SpockComparisonFailure: 
Condition not satisfied:

result == transaction
|      |  |
null   |  <com.github.example.model.Transaction@2cc788cc id=24 creationTime=2018-10-15T18:06:20.390Z sourceAccountId=21 targetAccountId=22 amount=1 status=PENDING>
       false

	at com.github.example.service.impl.TransactionServiceSpec.should return transaction by given id when transactions storage contains entity for given id(TransactionServiceSpec.groovy:88)

[ERROR] should throw exception when command for transaction creation is null(com.github.example.service.impl.TransactionServiceSpec)  Time elapsed: 0.004 s  <<< FAILURE!
org.spockframework.runtime.WrongExceptionThrownError: Expected exception of type 'java.lang.IllegalArgumentException', but no exception was thrown
	at com.github.example.service.impl.TransactionServiceSpec.should throw exception when command for transaction creation is null(TransactionServiceSpec.groovy:97)

[ERROR] should throw exception when accounts storage doesn't contains entity for given source account id and throws exception(com.github.example.service.impl.TransactionServiceSpec)  Time elapsed: 0.017 s  <<< FAILURE!
org.spockframework.runtime.WrongExceptionThrownError: Expected exception of type 'java.lang.IllegalArgumentException', but no exception was thrown
	at com.github.example.service.impl.TransactionServiceSpec.should throw exception when accounts storage doesn't contains entity for given source account id and throws exception(TransactionServiceSpec.groovy:112)

[ERROR] should throw exception when accounts storage doesn't contains entity for given target account id and throws exception(com.github.example.service.impl.TransactionServiceSpec)  Time elapsed: 0.017 s  <<< FAILURE!
org.spockframework.runtime.WrongExceptionThrownError: Expected exception of type 'java.lang.IllegalArgumentException', but no exception was thrown
	at com.github.example.service.impl.TransactionServiceSpec.should throw exception when accounts storage doesn't contains entity for given target account id and throws exception(TransactionServiceSpec.groovy:127)

[ERROR] should create transaction by given command and insert it into transactions storage when command for transaction creation is valid(com.github.example.service.impl.TransactionServiceSpec)  Time elapsed: 0.015 s  <<< FAILURE!
org.spockframework.mock.TooFewInvocationsError: 
Too few invocations for:

1 * transactionDao.insert({
            it.sourceAccountId == sourceAccountId
            it.targetAccountId == targetAccountId
            it.amount == amount
        } as Transaction)   (0 invocations)

Unmatched invocations (ordered by similarity):

None


	at com.github.example.service.impl.TransactionServiceSpec.should create transaction by given command and insert it into transactions storage when command for transaction creation is valid(TransactionServiceSpec.groovy:136)

[ERROR] should return created transaction when transaction successfully inserted and returned by transactions storage(com.github.example.service.impl.TransactionServiceSpec)  Time elapsed: 0.012 s  <<< FAILURE!
org.spockframework.runtime.SpockComparisonFailure: 
Condition not satisfied:

result == transaction
|      |  |
null   |  <com.github.example.model.Transaction@575dcac6 id=29 creationTime=2018-10-15T18:06:20.455Z sourceAccountId=31 targetAccountId=32 amount=1 status=PENDING>
       false

	at com.github.example.service.impl.TransactionServiceSpec.should return created transaction when transaction successfully inserted and returned by transactions storage(TransactionServiceSpec.groovy:157)

[INFO] Running com.github.example.service.impl.TransactionExecutionServiceSpec
[ERROR] Tests run: 21, Failures: 2, Errors: 19, Skipped: 0, Time elapsed: 0.186 s <<< FAILURE! - in com.github.example.service.impl.TransactionExecutionServiceSpec
[ERROR] should not execute any transaction when transaction storage doesn't contains pending transactions(com.github.example.service.impl.TransactionExecutionServiceSpec)  Time elapsed: 0.016 s  <<< ERROR!
java.lang.UnsupportedOperationException
	at com.github.example.service.impl.TransactionExecutionServiceSpec.should not execute any transaction when transaction storage doesn't contains pending transactions(TransactionExecutionServiceSpec.groovy:53)

[ERROR] should execute transactions with same source account sequentially when transaction storage contains pending transactions only with one source account(com.github.example.service.impl.TransactionExecutionServiceSpec)  Time elapsed: 0.006 s  <<< ERROR!
java.lang.UnsupportedOperationException
	at com.github.example.service.impl.TransactionExecutionServiceSpec.should execute transactions with same source account sequentially when transaction storage contains pending transactions only with one source account(TransactionExecutionServiceSpec.groovy:65)

[ERROR] should not throw exception when couldn't lock one of transaction during execution of pending transactions(com.github.example.service.impl.TransactionExecutionServiceSpec)  Time elapsed: 0.011 s  <<< ERROR!
java.lang.UnsupportedOperationException
	at com.github.example.service.impl.TransactionExecutionServiceSpec.should not throw exception when couldn't lock one of transaction during execution of pending transactions(TransactionExecutionServiceSpec.groovy:79)

[ERROR] should not throw exception when one of pending transactions already executed during execution of pending transactions(com.github.example.service.impl.TransactionExecutionServiceSpec)  Time elapsed: 0.006 s  <<< ERROR!
java.lang.UnsupportedOperationException
	at com.github.example.service.impl.TransactionExecutionServiceSpec.should not throw exception when one of pending transactions already executed during execution of pending transactions(TransactionExecutionServiceSpec.groovy:92)

[ERROR] should throw exception when try executes not pending transaction(com.github.example.service.impl.TransactionExecutionServiceSpec)  Time elapsed: 0.007 s  <<< FAILURE!
org.spockframework.runtime.WrongExceptionThrownError: Expected exception of type 'java.lang.IllegalStateException', but got 'java.lang.UnsupportedOperationException'
	at com.github.example.service.impl.TransactionExecutionServiceSpec.should throw exception when try executes not pending transaction(TransactionExecutionServiceSpec.groovy:107)
Caused by: java.lang.UnsupportedOperationException
	at com.github.example.service.impl.TransactionExecutionServiceSpec.should throw exception when try executes not pending transaction(TransactionExecutionServiceSpec.groovy:104)

[ERROR] should lock transaction for id by transactions storage when executes transaction(com.github.example.service.impl.TransactionExecutionServiceSpec)  Time elapsed: 0.011 s  <<< ERROR!
java.lang.UnsupportedOperationException
	at com.github.example.service.impl.TransactionExecutionServiceSpec.should lock transaction for id by transactions storage when executes transaction(TransactionExecutionServiceSpec.groovy:113)

[ERROR] should throw exception when transactions storage failed to lock transaction and throws exception(com.github.example.service.impl.TransactionExecutionServiceSpec)  Time elapsed: 0.01 s  <<< FAILURE!
org.spockframework.runtime.WrongExceptionThrownError: Expected exception of type 'com.github.example.exception.CouldNotAcquireLockException', but got 'java.lang.UnsupportedOperationException'
	at com.github.example.service.impl.TransactionExecutionServiceSpec.should throw exception when transactions storage failed to lock transaction and throws exception(TransactionExecutionServiceSpec.groovy:131)
Caused by: java.lang.UnsupportedOperationException
	at com.github.example.service.impl.TransactionExecutionServiceSpec.should throw exception when transactions storage failed to lock transaction and throws exception(TransactionExecutionServiceSpec.groovy:128)

[ERROR] should primarily lock account with lower id and then with greater id by accounts storage when executes transaction(com.github.example.service.impl.TransactionExecutionServiceSpec)  Time elapsed: 0.012 s  <<< ERROR!
java.lang.UnsupportedOperationException
	at com.github.example.service.impl.TransactionExecutionServiceSpec.should primarily lock account with lower id and then with greater id by accounts storage when executes transaction(TransactionExecutionServiceSpec.groovy:140)

[ERROR] should primarily lock account with lower id and then with greater id by accounts storage when executes transaction(com.github.example.service.impl.TransactionExecutionServiceSpec)  Time elapsed: 0.017 s  <<< ERROR!
java.lang.UnsupportedOperationException
	at com.github.example.service.impl.TransactionExecutionServiceSpec.should primarily lock account with lower id and then with greater id by accounts storage when executes transaction(TransactionExecutionServiceSpec.groovy:140)

[ERROR] should mark transaction as failed when accounts storage not found source account and throws exception(com.github.example.service.impl.TransactionExecutionServiceSpec)  Time elapsed: 0.012 s  <<< ERROR!
java.lang.UnsupportedOperationException
	at com.github.example.service.impl.TransactionExecutionServiceSpec.should mark transaction as failed when accounts storage not found source account and throws exception(TransactionExecutionServiceSpec.groovy:162)

[ERROR] should mark transaction as failed when accounts storage not found target account and throws exception(com.github.example.service.impl.TransactionExecutionServiceSpec)  Time elapsed: 0.011 s  <<< ERROR!
java.lang.UnsupportedOperationException
	at com.github.example.service.impl.TransactionExecutionServiceSpec.should mark transaction as failed when accounts storage not found target account and throws exception(TransactionExecutionServiceSpec.groovy:178)

[ERROR] should mark transaction as failed when source account balance after withdrawal less than zero(com.github.example.service.impl.TransactionExecutionServiceSpec)  Time elapsed: 0.014 s  <<< ERROR!
java.lang.UnsupportedOperationException
	at com.github.example.service.impl.TransactionExecutionServiceSpec.should mark transaction as failed when source account balance after withdrawal less than zero(TransactionExecutionServiceSpec.groovy:195)

[ERROR] should mark transaction as failed when source account balance after withdrawal less than zero(com.github.example.service.impl.TransactionExecutionServiceSpec)  Time elapsed: 0.018 s  <<< ERROR!
java.lang.UnsupportedOperationException
	at com.github.example.service.impl.TransactionExecutionServiceSpec.should mark transaction as failed when source account balance after withdrawal less than zero(TransactionExecutionServiceSpec.groovy:195)

[ERROR] should mark transaction as failed when source account balance after withdrawal less than zero(com.github.example.service.impl.TransactionExecutionServiceSpec)  Time elapsed: 0.023 s  <<< ERROR!
java.lang.UnsupportedOperationException
	at com.github.example.service.impl.TransactionExecutionServiceSpec.should mark transaction as failed when source account balance after withdrawal less than zero(TransactionExecutionServiceSpec.groovy:195)

[ERROR] should withdraw from source account and update it in storage when transaction executed successfully(com.github.example.service.impl.TransactionExecutionServiceSpec)  Time elapsed: 0.01 s  <<< ERROR!
java.lang.UnsupportedOperationException
	at com.github.example.service.impl.TransactionExecutionServiceSpec.should withdraw from source account and update it in storage when transaction executed successfully(TransactionExecutionServiceSpec.groovy:218)

[ERROR] should withdraw from source account and update it in storage when transaction executed successfully(com.github.example.service.impl.TransactionExecutionServiceSpec)  Time elapsed: 0.017 s  <<< ERROR!
java.lang.UnsupportedOperationException
	at com.github.example.service.impl.TransactionExecutionServiceSpec.should withdraw from source account and update it in storage when transaction executed successfully(TransactionExecutionServiceSpec.groovy:218)

[ERROR] should withdraw from source account and update it in storage when transaction executed successfully(com.github.example.service.impl.TransactionExecutionServiceSpec)  Time elapsed: 0.022 s  <<< ERROR!
java.lang.UnsupportedOperationException
	at com.github.example.service.impl.TransactionExecutionServiceSpec.should withdraw from source account and update it in storage when transaction executed successfully(TransactionExecutionServiceSpec.groovy:218)

[ERROR] should deposit into target account and update it in storage when transaction executed successfully(com.github.example.service.impl.TransactionExecutionServiceSpec)  Time elapsed: 0.009 s  <<< ERROR!
java.lang.UnsupportedOperationException
	at com.github.example.service.impl.TransactionExecutionServiceSpec.should deposit into target account and update it in storage when transaction executed successfully(TransactionExecutionServiceSpec.groovy:244)

[ERROR] should deposit into target account and update it in storage when transaction executed successfully(com.github.example.service.impl.TransactionExecutionServiceSpec)  Time elapsed: 0.013 s  <<< ERROR!
java.lang.UnsupportedOperationException
	at com.github.example.service.impl.TransactionExecutionServiceSpec.should deposit into target account and update it in storage when transaction executed successfully(TransactionExecutionServiceSpec.groovy:244)

[ERROR] should deposit into target account and update it in storage when transaction executed successfully(com.github.example.service.impl.TransactionExecutionServiceSpec)  Time elapsed: 0.017 s  <<< ERROR!
java.lang.UnsupportedOperationException
	at com.github.example.service.impl.TransactionExecutionServiceSpec.should deposit into target account and update it in storage when transaction executed successfully(TransactionExecutionServiceSpec.groovy:244)

[ERROR] should mark transaction as succeed when transaction executed successfully(com.github.example.service.impl.TransactionExecutionServiceSpec)  Time elapsed: 0.008 s  <<< ERROR!
java.lang.UnsupportedOperationException
	at com.github.example.service.impl.TransactionExecutionServiceSpec.should mark transaction as succeed when transaction executed successfully(TransactionExecutionServiceSpec.groovy:263)

[INFO] Running com.github.example.service.impl.AccountServiceSpec
[ERROR] Tests run: 7, Failures: 6, Errors: 0, Skipped: 0, Time elapsed: 0.051 s <<< FAILURE! - in com.github.example.service.impl.AccountServiceSpec
[ERROR] should return not empty collection of accounts when accounts storage returns not empty collection(com.github.example.service.impl.AccountServiceSpec)  Time elapsed: 0.006 s  <<< FAILURE!
org.spockframework.runtime.ConditionNotSatisfiedError: 
Condition not satisfied:

!result.empty
||      |
|[]     true
false

	at com.github.example.service.impl.AccountServiceSpec.should return not empty collection of accounts when accounts storage returns not empty collection(AccountServiceSpec.groovy:49)

[ERROR] should throw exception when accounts storage doesn't contains entity for given id and throws exception(com.github.example.service.impl.AccountServiceSpec)  Time elapsed: 0.006 s  <<< FAILURE!
org.spockframework.runtime.WrongExceptionThrownError: Expected exception of type 'com.github.example.exception.EntityNotFoundException', but no exception was thrown
	at com.github.example.service.impl.AccountServiceSpec.should throw exception when accounts storage doesn't contains entity for given id and throws exception(AccountServiceSpec.groovy:62)

[ERROR] should return account by given id when accounts storage contains entity for given id(com.github.example.service.impl.AccountServiceSpec)  Time elapsed: 0.009 s  <<< FAILURE!
org.spockframework.runtime.SpockComparisonFailure: 
Condition not satisfied:

result == account
|      |  |
null   |  <com.github.example.model.Account@295af370 id=47 creationTime=2018-10-15T18:06:20.704Z balance=1>
       false

	at com.github.example.service.impl.AccountServiceSpec.should return account by given id when accounts storage contains entity for given id(AccountServiceSpec.groovy:75)

[ERROR] should throw exception when command for account creation is null(com.github.example.service.impl.AccountServiceSpec)  Time elapsed: 0.005 s  <<< FAILURE!
org.spockframework.runtime.WrongExceptionThrownError: Expected exception of type 'java.lang.IllegalArgumentException', but no exception was thrown
	at com.github.example.service.impl.AccountServiceSpec.should throw exception when command for account creation is null(AccountServiceSpec.groovy:84)

[ERROR] should create account by given command and insert it into accounts storage when command for account creation is valid(com.github.example.service.impl.AccountServiceSpec)  Time elapsed: 0.009 s  <<< FAILURE!
org.spockframework.mock.TooFewInvocationsError: 
Too few invocations for:

1 * accountDao.insert({ it.balance == initialBalance } as Account)   (0 invocations)

Unmatched invocations (ordered by similarity):

None


	at com.github.example.service.impl.AccountServiceSpec.should create account by given command and insert it into accounts storage when command for account creation is valid(AccountServiceSpec.groovy:94)

[ERROR] should return created account when account successfully inserted and returned by accounts storage(com.github.example.service.impl.AccountServiceSpec)  Time elapsed: 0.006 s  <<< FAILURE!
org.spockframework.runtime.SpockComparisonFailure: 
Condition not satisfied:

result == account
|      |  |
null   |  <com.github.example.model.Account@5c0d2c53 id=50 creationTime=2018-10-15T18:06:20.727Z balance=1>
       false

	at com.github.example.service.impl.AccountServiceSpec.should return created account when account successfully inserted and returned by accounts storage(AccountServiceSpec.groovy:110)

[INFO] 
[INFO] Results:
[INFO] 
[ERROR] Failures: 
[ERROR]   AccountServiceSpec.should create account by given command and insert it into accounts storage when command for account creation is valid:94 Too few invocations for:

1 * accountDao.insert({ it.balance == initialBalance } as Account)   (0 invocations)

Unmatched invocations (ordered by similarity):

None


[ERROR]   AccountServiceSpec.should return account by given id when accounts storage contains entity for given id:75 Condition not satisfied:

result == account
|      |  |
null   |  <com.github.example.model.Account@295af370 id=47 creationTime=2018-10-15T18:06:20.704Z balance=1>
       false

[ERROR]   AccountServiceSpec.should return created account when account successfully inserted and returned by accounts storage:110 Condition not satisfied:

result == account
|      |  |
null   |  <com.github.example.model.Account@5c0d2c53 id=50 creationTime=2018-10-15T18:06:20.727Z balance=1>
       false

[ERROR]   AccountServiceSpec.should return not empty collection of accounts when accounts storage returns not empty collection:49 Condition not satisfied:

!result.empty
||      |
|[]     true
false

[ERROR]   AccountServiceSpec.should throw exception when accounts storage doesn't contains entity for given id and throws exception:62->SpecInternals.thrownImpl:67->SpecInternals.checkExceptionThrown:80 Expected exception of type 'com.github.example.exception.EntityNotFoundException', but no exception was thrown
[ERROR]   AccountServiceSpec.should throw exception when command for account creation is null:84->SpecInternals.thrownImpl:67->SpecInternals.checkExceptionThrown:80 Expected exception of type 'java.lang.IllegalArgumentException', but no exception was thrown
[ERROR]   TransactionExecutionServiceSpec.should throw exception when transactions storage failed to lock transaction and throws exception:131->SpecInternals.thrownImpl:67->SpecInternals.checkExceptionThrown:80 Expected exception of type 'com.github.example.exception.CouldNotAcquireLockException', but got 'java.lang.UnsupportedOperationException'
[ERROR]   TransactionExecutionServiceSpec.should throw exception when try executes not pending transaction:107->SpecInternals.thrownImpl:67->SpecInternals.checkExceptionThrown:80 Expected exception of type 'java.lang.IllegalStateException', but got 'java.lang.UnsupportedOperationException'
[ERROR]   TransactionServiceSpec.should create transaction by given command and insert it into transactions storage when command for transaction creation is valid:136 Too few invocations for:

1 * transactionDao.insert({
            it.sourceAccountId == sourceAccountId
            it.targetAccountId == targetAccountId
            it.amount == amount
        } as Transaction)   (0 invocations)

Unmatched invocations (ordered by similarity):

None


[ERROR]   TransactionServiceSpec.should return created transaction when transaction successfully inserted and returned by transactions storage:157 Condition not satisfied:

result == transaction
|      |  |
null   |  <com.github.example.model.Transaction@575dcac6 id=29 creationTime=2018-10-15T18:06:20.455Z sourceAccountId=31 targetAccountId=32 amount=1 status=PENDING>
       false

[ERROR]   TransactionServiceSpec.should return not empty collection of transactions when transactions storage returns not empty collection:63 Condition not satisfied:

!result.empty
||      |
|[]     true
false

[ERROR]   TransactionServiceSpec.should return transaction by given id when transactions storage contains entity for given id:88 Condition not satisfied:

result == transaction
|      |  |
null   |  <com.github.example.model.Transaction@2cc788cc id=24 creationTime=2018-10-15T18:06:20.390Z sourceAccountId=21 targetAccountId=22 amount=1 status=PENDING>
       false

[ERROR]   TransactionServiceSpec.should throw exception when accounts storage doesn't contains entity for given source account id and throws exception:112->SpecInternals.thrownImpl:67->SpecInternals.checkExceptionThrown:80 Expected exception of type 'java.lang.IllegalArgumentException', but no exception was thrown
[ERROR]   TransactionServiceSpec.should throw exception when accounts storage doesn't contains entity for given target account id and throws exception:127->SpecInternals.thrownImpl:67->SpecInternals.checkExceptionThrown:80 Expected exception of type 'java.lang.IllegalArgumentException', but no exception was thrown
[ERROR]   TransactionServiceSpec.should throw exception when command for transaction creation is null:97->SpecInternals.thrownImpl:67->SpecInternals.checkExceptionThrown:80 Expected exception of type 'java.lang.IllegalArgumentException', but no exception was thrown
[ERROR]   TransactionServiceSpec.should throw exception when transactions storage doesn't contains entity for given id and throws exception:76->SpecInternals.thrownImpl:67->SpecInternals.checkExceptionThrown:80 Expected exception of type 'com.github.example.exception.EntityNotFoundException', but no exception was thrown
[ERROR] Errors: 
[ERROR] com.github.example.service.impl.TransactionExecutionServiceSpec.should deposit into target account and update it in storage when transaction executed successfully(com.github.example.service.impl.TransactionExecutionServiceSpec)
[ERROR]   Run 1: TransactionExecutionServiceSpec.should deposit into target account and update it in storage when transaction executed successfully:244 » UnsupportedOperation
[ERROR]   Run 2: TransactionExecutionServiceSpec.should deposit into target account and update it in storage when transaction executed successfully:244 » UnsupportedOperation
[ERROR]   Run 3: TransactionExecutionServiceSpec.should deposit into target account and update it in storage when transaction executed successfully:244 » UnsupportedOperation
[INFO] 
[ERROR]   TransactionExecutionServiceSpec.should execute transactions with same source account sequentially when transaction storage contains pending transactions only with one source account:65 » UnsupportedOperation
[ERROR]   TransactionExecutionServiceSpec.should lock transaction for id by transactions storage when executes transaction:113 » UnsupportedOperation
[ERROR]   TransactionExecutionServiceSpec.should mark transaction as failed when accounts storage not found source account and throws exception:162 » UnsupportedOperation
[ERROR]   TransactionExecutionServiceSpec.should mark transaction as failed when accounts storage not found target account and throws exception:178 » UnsupportedOperation
[ERROR] com.github.example.service.impl.TransactionExecutionServiceSpec.should mark transaction as failed when source account balance after withdrawal less than zero(com.github.example.service.impl.TransactionExecutionServiceSpec)
[ERROR]   Run 1: TransactionExecutionServiceSpec.should mark transaction as failed when source account balance after withdrawal less than zero:195 » UnsupportedOperation
[ERROR]   Run 2: TransactionExecutionServiceSpec.should mark transaction as failed when source account balance after withdrawal less than zero:195 » UnsupportedOperation
[ERROR]   Run 3: TransactionExecutionServiceSpec.should mark transaction as failed when source account balance after withdrawal less than zero:195 » UnsupportedOperation
[INFO] 
[ERROR]   TransactionExecutionServiceSpec.should mark transaction as succeed when transaction executed successfully:263 » UnsupportedOperation
[ERROR]   TransactionExecutionServiceSpec.should not execute any transaction when transaction storage doesn't contains pending transactions:53 » UnsupportedOperation
[ERROR]   TransactionExecutionServiceSpec.should not throw exception when couldn't lock one of transaction during execution of pending transactions:79 » UnsupportedOperation
[ERROR]   TransactionExecutionServiceSpec.should not throw exception when one of pending transactions already executed during execution of pending transactions:92 » UnsupportedOperation
[ERROR] com.github.example.service.impl.TransactionExecutionServiceSpec.should primarily lock account with lower id and then with greater id by accounts storage when executes transaction(com.github.example.service.impl.TransactionExecutionServiceSpec)
[ERROR]   Run 1: TransactionExecutionServiceSpec.should primarily lock account with lower id and then with greater id by accounts storage when executes transaction:140 » UnsupportedOperation
[ERROR]   Run 2: TransactionExecutionServiceSpec.should primarily lock account with lower id and then with greater id by accounts storage when executes transaction:140 » UnsupportedOperation
[INFO] 
[ERROR] com.github.example.service.impl.TransactionExecutionServiceSpec.should withdraw from source account and update it in storage when transaction executed successfully(com.github.example.service.impl.TransactionExecutionServiceSpec)
[ERROR]   Run 1: TransactionExecutionServiceSpec.should withdraw from source account and update it in storage when transaction executed successfully:218 » UnsupportedOperation
[ERROR]   Run 2: TransactionExecutionServiceSpec.should withdraw from source account and update it in storage when transaction executed successfully:218 » UnsupportedOperation
[ERROR]   Run 3: TransactionExecutionServiceSpec.should withdraw from source account and update it in storage when transaction executed successfully:218 » UnsupportedOperation
[INFO] 
[INFO] 
[ERROR] Tests run: 63, Failures: 16, Errors: 12, Skipped: 0
[INFO] 
[INFO] ------------------------------------------------------------------------
[INFO] BUILD FAILURE
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 18.776 s
[INFO] Finished at: 2018-10-15T20:06:21+02:00
[INFO] Final Memory: 31M/587M
[INFO] ------------------------------------------------------------------------
[ERROR] Failed to execute goal org.apache.maven.plugins:maven-surefire-plugin:2.21.0:test (default-test) on project money-transfer-service: There are test failures.
[ERROR] 
[ERROR] Please refer to /root/workspace/DmitriiSerikov/money-transfer-service/441784509/target/surefire-reports for the individual test results.
[ERROR] Please refer to dump files (if any exist) [date]-jvmRun[N].dump, [date].dumpstream and [date]-jvmRun[N].dumpstream.
[ERROR] -> [Help 1]
[ERROR] 
[ERROR] To see the full stack trace of the errors, re-run Maven with the -e switch.
[ERROR] Re-run Maven using the -X switch to enable full debug logging.
[ERROR] 
[ERROR] For more information about the errors and possible solutions, please read the following articles:
[ERROR] [Help 1] http://cwiki.apache.org/confluence/display/MAVEN/MojoFailureException
