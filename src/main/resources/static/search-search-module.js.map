{"version":3,"sources":["webpack:///./src/app/main/search/seal/seal.component.css","webpack:///./src/app/main/search/seal/seal.component.html","webpack:///./src/app/main/search/seal/seal.component.ts","webpack:///./src/app/main/search/search.component.css","webpack:///./src/app/main/search/search.component.html","webpack:///./src/app/main/search/search.component.ts","webpack:///./src/app/main/search/search.module.ts","webpack:///./src/app/main/search/search.routing.ts","webpack:///./src/app/main/search/search.service.ts"],"names":[],"mappings":";;;;;;;;;AAAA,mB;;;;;;;;;;;ACAA,mzB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACA6E;AAClB;AACsB;AACrB;AACxB;AAQpC;IAIE,uBAA4C,IAAS,EACjC,YAAyB,EACzB,aAA2B;QAFH,SAAI,GAAJ,IAAI,CAAK;QACjC,iBAAY,GAAZ,YAAY,CAAa;QACzB,kBAAa,GAAb,aAAa,CAAc;IAAI,CAAC;IAEpD,gCAAQ,GAAR;QACE,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC;YAClC,QAAQ,EAAE,IAAI,0DAAW,CAAC,EAAC,KAAK,EAAE,IAAI,CAAC,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAC,EAAE,yDAAU,CAAC,QAAQ,CAAC;YAClF,MAAM,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;YACjC,MAAM,EAAE,CAAC,EAAE,EAAE,yDAAU,CAAC,QAAQ,CAAC;SAClC,CAAC,CAAC;IACL,CAAC;IAED,6BAAK,GAAL;QACE,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,SAAS,CACrD,aAAG;YACD,yDAAM,CAAC,GAAG,CAAC,IAAI,EAAE,WAAW,CAAC;QAC/B,CAAC,CAAC,CAAC;IACP,CAAC;IArBU,aAAa;QANzB,+DAAS,CAAC;YACT,QAAQ,EAAE,UAAU;;;YAGpB,aAAa,EAAE,+DAAiB,CAAC,IAAI;SACtC,CAAC;QAKa,uEAAM,CAAC,wEAAe,CAAC;iDACF,0DAAW;YACV,oEAAY;OANpC,aAAa,CAuBzB;IAAD,oBAAC;CAAA;AAvByB;;;;;;;;;;;;ACZ1B,gMAAgM,yBAAyB,GAAG,C;;;;;;;;;;;ACA5N,yvEAAyvE,2CAA2C,+LAA+L,uCAAuC,2LAA2L,kBAAkB,sMAAsM,uBAAuB,qMAAqM,uBAAuB,upCAAupC,2BAA2B,6B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAhxI;AACM;AACf;AACQ;AACY;AACJ;AACrB;AACU;AACQ;AAOtD;IAOE,yBAAoB,YAAyB,EACzB,OAAe,EACf,cAA6B,EAC7B,aAA2B,EAC3B,WAAsB;QAJtB,iBAAY,GAAZ,YAAY,CAAa;QACzB,YAAO,GAAP,OAAO,CAAQ;QACf,mBAAc,GAAd,cAAc,CAAe;QAC7B,kBAAa,GAAb,aAAa,CAAc;QAC3B,gBAAW,GAAX,WAAW,CAAW;QAT1C,YAAO,GAAY,KAAK,CAAC;QAEzB,qBAAgB,GAAa,CAAC,UAAU,EAAE,cAAc,EAAE,UAAU,EAAE,eAAe,EAAE,eAAe,EAAE,eAAe,EAAE,YAAY,EAAE,MAAM,CAAC,CAAC;IAOjG,CAAC;IAE/C,kCAAQ,GAAR;QACE,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC;YAClC,QAAQ,EAAE,EAAE;YACZ,SAAS,EAAE,EAAE;YACb,OAAO,EAAE,EAAE;SACZ,CAAC,CAAC;IACL,CAAC;IAED,gCAAM,GAAN;QAAA,iBAOC;QANC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,SAAS,CACnD,aAAG;YACD,KAAI,CAAC,UAAU,GAAG,IAAI,0EAAkB,CAAC,GAAG,CAAC,CAAC;QAChD,CAAC,CACF,CAAC;IACJ,CAAC;IAED,uCAAa,GAAb,UAAc,QAAQ;QACpB,IAAI,CAAC,aAAa,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC,SAAS,CAChD,aAAG;YACD,yDAAM,CAAC,GAAG,CAAC,IAAI,EAAE,eAAe,CAAC;QACnC,CAAC,CACF,CAAC;IACJ,CAAC;IAED,oCAAU,GAAV,UAAW,QAAQ;QACjB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,kEAAa,EAAE;YACnC,IAAI,EAAE,QAAQ;SACf,CAAC,CAAC;IACL,CAAC;IAED,8BAAI,GAAJ,UAAK,QAAQ;QACX,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC,CAAC;IAClD,CAAC;IA9CU,eAAe;QAL3B,+DAAS,CAAC;YACT,QAAQ,EAAE,YAAY;;;SAGvB,CAAC;yCAQkC,0DAAW;YAChB,sDAAM;YACC,6DAAa;YACd,oEAAY;YACd,2DAAS;OAX/B,eAAe,CAgD3B;IAAD,sBAAC;CAAA;AAhD2B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACfa;AACM;AACM;AACN;AACE;AACgB;AACV;AACV;AACQ;AACG;AACC;AACE;AACA;AACH;AACA;AACL;AACF;AACK;AACF;AACG;AAgCvD;IAAA;IAA4B,CAAC;IAAhB,YAAY;QA9BxB,8DAAQ,CAAC;YACR,OAAO,EAAE;gBACP,4DAAY;gBACZ,4DAAY;gBACZ,6DAAa;gBACb,qEAAgB;gBAChB,0DAAW;gBACX,kEAAmB;gBACnB,sEAAc;gBACd,yEAAe;gBACf,yEAAe;gBACf,sEAAmB;gBACnB,sEAAmB;gBACnB,8EAAkB;gBAClB,oEAAa;gBACb,iEAAc;gBACd,kEAAe;gBACf,gEAAW;aACZ;YACD,eAAe,EAAE;gBACf,mEAAa;aACd;YACD,YAAY,EAAE;gBACZ,iEAAe;gBACf,mEAAa;aACd;YACD,SAAS,EAAE;gBACT,8DAAa;aACd;SACF,CAAC;OACW,YAAY,CAAI;IAAD,mBAAC;CAAA;AAAJ;;;;;;;;;;;;;;;;;;;;;;;;ACnDgB;AACM;AACM;AAYrD;IAAA;IAA6B,CAAC;IAAjB,aAAa;QAVzB,8DAAQ,CAAC;YACR,OAAO,EAAE;gBACP,4DAAY,CAAC,QAAQ,CAAC;oBAClB;wBACI,IAAI,EAAE,EAAE;wBACR,SAAS,EAAE,iEAAe;qBAC7B;iBACJ,CAAC;aACH;SACF,CAAC;OACW,aAAa,CAAI;IAAD,oBAAC;CAAA;AAAJ;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACdiB;AACqB;AACvB;AACsB;AAK/D;IAIE,uBAAoB,WAAuB,EAAU,OAAe;QAAhD,gBAAW,GAAX,WAAW,CAAY;QAAU,YAAO,GAAP,OAAO,CAAQ;QAF5D,QAAG,GAAG,qEAAW,CAAC,GAAG,GAAG,yBAAyB,CAAC;IAEc,CAAC;IAElE,8BAAM,GAAb,UAAc,IAAI;QAChB,IAAM,OAAO,GAAG,IAAI,gEAAW,EAAE,CAAC,GAAG,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAC;QAC1E,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAkB,IAAI,CAAC,GAAG,EACpD,IAAI,EACJ;YACE,OAAO,EAAE,OAAO;SACjB,CACF,CAAC;IACJ,CAAC;IAdU,aAAa;QAHzB,gEAAU,CAAC;YACV,UAAU,EAAE,MAAM;SACnB,CAAC;yCAKiC,+DAAU,EAAmB,sDAAM;OAJzD,aAAa,CAgBzB;IAAD,oBAAC;CAAA;AAhByB","file":"search-search-module.js","sourcesContent":["module.exports = \"\"","module.exports = \"<h2 mat-dialog-title>Impressão de lacres</h2>\\n<form [formGroup]=\\\"form\\\" fxLayout=\\\"column\\\">\\n  <div>\\n    <mat-form-field>\\n      <input matInput formControlName=\\\"protocol\\\" placeholder=\\\"Protocolo\\\">\\n    </mat-form-field>\\n  </div>\\n  <div>\\n    <mat-form-field>\\n      <input matInput formControlName=\\\"amount\\\" placeholder=\\\"Quantidade\\\">\\n    </mat-form-field>\\n  </div>\\n  <div>\\n    <mat-form-field>\\n      <input matInput formControlName=\\\"reason\\\" placeholder=\\\"Motivo\\\">\\n    </mat-form-field>\\n  </div>\\n  <br/>\\n  <div>\\n    <button mat-raised-button color=\\\"primary\\\" [disabled]=\\\"!form.valid\\\" (click)=\\\"print()\\\">Imprimir Lacres</button>\\n    <span fxFlex=\\\"2\\\"></span>\\n    <button mat-raised-button color=\\\"primary\\\" [mat-dialog-close]=\\\"true\\\">Fechar</button>\\n  </div>\\n</form>\"","import { Component, OnInit, Inject, ViewEncapsulation } from '@angular/core';\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';\nimport { PrintService } from '../../services/print.service';\nimport { saveAs } from 'file-saver';\n\n@Component({\n  selector: 'app-seal',\n  templateUrl: './seal.component.html',\n  styleUrls: ['./seal.component.css'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class SealComponent implements OnInit {\n\n  form: FormGroup;\n  \n  constructor(@Inject(MAT_DIALOG_DATA) public data: any,\n              private _formBuilder: FormBuilder,\n              private _printService: PrintService) { }\n\n  ngOnInit() {\n    this.form = this._formBuilder.group({\n      protocol: new FormControl({value: this.data, disabled: true}, Validators.required),\n      amount: ['', Validators.required],\n      reason: ['', Validators.required]\n    });\n  }\n\n  print() {\n    this._printService.printSeal(this.form.value).subscribe(\n      suc => {\n        saveAs(suc.body, 'lacre.pdf')\n      });\n  }\n\n}\n","module.exports = \".mat-column-entranceDate, .mat-column-exitDate, .mat-column-sportingPlate, \\n.mat-column-originalPlate, .mat-column-printProtocol, .mat-column-printSeals,\\n.mat-column-exit {\\n    text-align: center;\\n}\"","module.exports = \"<div class=\\\"mat-elevation-z7\\\">\\n  <mat-accordion class=\\\"headers-align\\\">\\n    <mat-expansion-panel [expanded]=\\\"!filtred\\\" [disabled]=\\\"!filtred\\\" (opened)=\\\"filtred = false\\\" hideToggle=\\\"true\\\">\\n      <mat-expansion-panel-header>\\n        <mat-panel-title fxFlex=\\\"70\\\">\\n          <mat-icon>filter_list</mat-icon>\\n          <div fxFlexOffset=\\\"10px\\\"> Filtros</div>\\n        </mat-panel-title>\\n      </mat-expansion-panel-header>\\n      <form [formGroup]=\\\"form\\\" fxLayout=\\\"column\\\">\\n        <div fxFlex=\\\"100\\\" fxLayout=\\\"row\\\">\\n          <mat-form-field fxFlex=\\\"50\\\">\\n            <input matInput formControlName=\\\"protocol\\\" placeholder=\\\"Protocolo\\\">\\n          </mat-form-field>\\n        </div>\\n        <div fxFlex=\\\"100\\\" fxLayout=\\\"row\\\">\\n          <mat-form-field fxFlex=\\\"24\\\">\\n            <input matInput formControlName=\\\"startDate\\\" [matDatepicker]=\\\"startDate\\\" placeholder=\\\"Data Início\\\">\\n            <mat-datepicker-toggle matSuffix [for]=\\\"startDate\\\"></mat-datepicker-toggle>\\n            <mat-datepicker #startDate touchUi=\\\"true\\\"></mat-datepicker>\\n          </mat-form-field>\\n          <span fxFlex=\\\"2\\\"></span>\\n          <mat-form-field fxFlex=\\\"24\\\">\\n            <input matInput formControlName=\\\"endDate\\\" [matDatepicker]=\\\"endDate\\\" placeholder=\\\"Data Término\\\">\\n            <mat-datepicker-toggle matSuffix [for]=\\\"endDate\\\"></mat-datepicker-toggle>\\n            <mat-datepicker #endDate touchUi=\\\"true\\\"></mat-datepicker>\\n            <mat-error *ngIf=\\\"form.controls['endDate'].hasError('required')\\\">\\n              Campo obrigatório\\n            </mat-error>\\n          </mat-form-field>\\n        </div>\\n        <br/>\\n        <div fxFlex=\\\"100\\\" fxLayout=\\\"row\\\" fxLayoutAlign=\\\"space-between\\\">\\n          <button mat-raised-button (click)=\\\"search()\\\" [disabled]=\\\"!form.valid\\\" color=\\\"primary\\\">Consultar</button>\\n        </div>\\n      </form>\\n    </mat-expansion-panel>\\n  </mat-accordion>\\n</div>\\n<br/>\\n<div *ngIf=\\\"filtred\\\" class=\\\"mat-elevation-z7\\\">\\n  <table mat-table [dataSource]=\\\"dataSource\\\" class=\\\"mat-elevation-z7\\\" fxFlex=\\\"100\\\">\\n    <ng-container matColumnDef=\\\"entranceDate\\\">\\n      <th mat-header-cell *matHeaderCellDef> Data da Entrada </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.entranceDate | date: 'dd/MM/yyyy'}} </td>\\n    </ng-container>\\n    <ng-container matColumnDef=\\\"exitDate\\\">\\n      <th mat-header-cell *matHeaderCellDef> Data da Saída </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.exitDate | date: 'dd/MM/yyyy'}} </td>\\n    </ng-container>\\n    <ng-container matColumnDef=\\\"protocol\\\">\\n      <th mat-header-cell *matHeaderCellDef> Protocolo </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.protocol}} </td>\\n    </ng-container>\\n    <ng-container matColumnDef=\\\"sportingPlate\\\">\\n      <th mat-header-cell *matHeaderCellDef> Placa Ostentada </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.sportingPlate}} </td>\\n    </ng-container>\\n    <ng-container matColumnDef=\\\"originalPlate\\\">\\n      <th mat-header-cell *matHeaderCellDef> Placa Original </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\"> {{element.originalPlate}} </td>\\n    </ng-container>\\n    <ng-container matColumnDef=\\\"printProtocol\\\">\\n      <th mat-header-cell *matHeaderCellDef> Protocolo </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\">\\n        <button mat-button class=\\\"home\\\" (click)=\\\"printProtocol(element.protocol)\\\">\\n          <mat-icon>description</mat-icon>\\n        </button>\\n      </td>\\n    </ng-container>\\n    <ng-container matColumnDef=\\\"printSeals\\\">\\n      <th mat-header-cell *matHeaderCellDef> Lacre </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\">\\n        <button mat-button class=\\\"home\\\" (click)=\\\"printSeals(element.protocol)\\\">\\n          <mat-icon>dns</mat-icon>\\n        </button>\\n      </td>\\n    </ng-container>\\n    <ng-container matColumnDef=\\\"exit\\\">\\n      <th mat-header-cell *matHeaderCellDef> Saída </th>\\n      <td mat-cell *matCellDef=\\\"let element\\\">\\n        <button mat-button class=\\\"home\\\" (click)=\\\"exit(element.protocol)\\\" [disabled]=\\\"element.exitDate != null\\\">\\n          <mat-icon>exit_to_app</mat-icon>\\n        </button>\\n      </td>\\n    </ng-container>\\n    <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n    <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n  </table>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { SearchService } from './search.service';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { PrintService } from '../services/print.service';\nimport { saveAs } from 'file-saver';\nimport { MatDialog } from '@angular/material';\nimport { SealComponent } from './seal/seal.component';\n\n@Component({\n  selector: 'app-search',\n  templateUrl: './search.component.html',\n  styleUrls: ['./search.component.css']\n})\nexport class SearchComponent implements OnInit {\n\n  filtred: boolean = false;\n  form: FormGroup;\n  displayedColumns: string[] = ['protocol', 'entranceDate', 'exitDate', 'sportingPlate', 'originalPlate', 'printProtocol', 'printSeals', 'exit'];\n  dataSource: MatTableDataSource<Protocol>;\n\n  constructor(private _formBuilder: FormBuilder, \n              private _router: Router,\n              private _searchService: SearchService,\n              private _printService: PrintService,\n              private _sealDialog: MatDialog) { }\n\n  ngOnInit() {\n    this.form = this._formBuilder.group({\n      protocol: '',\n      startDate: '',\n      endDate: ''\n    });\n  }\n\n  search() {\n    this.filtred = true;\n    this._searchService.search(this.form.value).subscribe(\n      suc => {\n        this.dataSource = new MatTableDataSource(suc);\n      }\n    );\n  }\n\n  printProtocol(protocol) {\n    this._printService.printProcol(protocol).subscribe(\n      suc => {\n        saveAs(suc.body, 'protocolo.pdf')\n      }\n    );\n  }\n\n  printSeals(protocol) {\n    this._sealDialog.open(SealComponent, {\n      data: protocol\n    });\n  }\n\n  exit(protocol) {\n    this._router.navigate([\"/main/exit\", protocol]);\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SearchComponent } from './search.component';\nimport { RouterModule } from '@angular/router';\nimport { SearchRouting } from './search.routing';\nimport { MatExpansionModule } from '@angular/material/expansion';\nimport { MatIconModule } from '@angular/material/icon';\nimport { FormsModule } from '@angular/forms';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { FlexLayoutModule } from '@angular/flex-layout';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatNativeDateModule } from '@angular/material';\nimport { MatDatepickerModule } from '@angular/material';\nimport { MatTableModule } from '@angular/material';\nimport { SearchService } from './search.service';\nimport { SealComponent } from './seal/seal.component';\nimport { MatDialogModule } from '@angular/material';\nimport { ErrorModule } from '../../error/error.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    RouterModule,\n    SearchRouting,\n    FlexLayoutModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MatInputModule,\n    MatButtonModule,\n    MatSelectModule,\n    MatDatepickerModule,\n    MatNativeDateModule,\n    MatExpansionModule,\n    MatIconModule,\n    MatTableModule,\n    MatDialogModule,\n    ErrorModule\n  ],\n  entryComponents: [\n    SealComponent\n  ],\n  declarations: [\n    SearchComponent,\n    SealComponent\n  ],\n  providers: [\n    SearchService\n  ]\n})\nexport class SearchModule { }\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\nimport { SearchComponent } from './search.component';\n\n@NgModule({\n  imports: [\n    RouterModule.forChild([\n        { \n            path: '', \n            component: SearchComponent  \n        }\n    ])\n  ]\n})\nexport class SearchRouting { }","import { Injectable } from '@angular/core';\nimport { environment } from '../../../environments/environment';\nimport { Router } from '@angular/router';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SearchService {\n\n  private url = environment.url + \"/api/v1/entrance/search\";\n\n  constructor(private _httpClient: HttpClient, private _router: Router) { }\n\n  public search(data) {\n    const HEADERS = new HttpHeaders().set('Content-Type', 'application/json');\n    return this._httpClient.post<Array<Protocol>>(this.url,\n      data,\n      {\n        headers: HEADERS\n      }\n    );\n  }\n\n}\n"],"sourceRoot":""}