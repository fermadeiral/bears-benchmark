package org.projog.content_generated_at_runtime;
import org.projog.core.udp.compiler.*;
import org.projog.core.udp.interpreter.*;
import org.projog.core.udp.*;
import org.projog.core.term.*;
import org.projog.core.*;
import static org.projog.core.term.NumericTermComparator.NUMERIC_TERM_COMPARATOR;
// testCallCompiledEvaluatable/2
public final class %CLASS_NAME% implements CompiledPredicate {
   private final boolean initRule0() {
      v0_A = a0;
      v0_B = a1;
      final Numeric y0;
      Numeric num0 = c.getNumeric((((y0=c.getNumeric(v0_B)).getType()==TermType.INTEGER)?new IntegerNumber(y0.getLong()*2):new DecimalFraction(y0.getDouble()*2.0)));
      final Numeric y1;
      v0_C = (((y1=c.getNumeric(num0)).getType()==TermType.INTEGER)?new IntegerNumber(y1.getLong()+1):new DecimalFraction(y1.getDouble()+1.0));
      return true;
   }
   private final boolean retryRule0() {
      do {
         mainloop:
         switch (conjunctionCtr) {
            case 0:
            if (c0_0==null) {
               c0_0 = new CompiledPredicateSourceGeneratorTest$3(v0_A, v0_B, v0_C);
            } else {
               v0_A = _0;
               v0_B = _1;
               v0_C = _2;
            }
            if (!c0_0.evaluate((Term[])null)) {
               return false;
            }
            _0 = v0_A;
            v0_A = v0_A.getTerm();
            _1 = v0_B;
            v0_B = v0_B.getTerm();
            _2 = v0_C;
            v0_C = v0_C.getTerm();
            if (NUMERIC_TERM_COMPARATOR.compare(v0_A, FRACTION_1_5, c)!=1) {
               if (v0_A!=null) v0_A.backtrack();
               if (v0_B!=null) v0_B.backtrack();
               if (v0_C!=null) v0_C.backtrack();
               break mainloop;
            }
            if (NUMERIC_TERM_COMPARATOR.compare(v0_A, FRACTION_18_5, c)>0) {
               if (v0_A!=null) v0_A.backtrack();
               if (v0_B!=null) v0_B.backtrack();
               if (v0_C!=null) v0_C.backtrack();
               break mainloop;
            }
            conjunctionCtr = 1;
            return true;
            case 1:
            conjunctionCtr = 0;
            if (v0_A!=null) v0_A.backtrack();
            if (v0_B!=null) v0_B.backtrack();
            if (v0_C!=null) v0_C.backtrack();
         }
      } while (true);
   }
   public %CLASS_NAME%(final KnowledgeBase _kb) {
      c = KnowledgeBaseUtils.getCalculatables(_kb);
      s = KnowledgeBaseUtils.getSpyPoints(_kb).getSpyPoint(new PredicateKey("testCallCompiledEvaluatable", 2));
      d = false;
   }
   %CLASS_NAME%(final Term in0, final Term in1) {
      a0 = in0.getTerm();
      a1 = in1.getTerm();
      d = s.isEnabled();
   }
   private final void backtrack() {
      a0.backtrack();
      a1.backtrack();
   }
   public final boolean evaluate(final Term... args) {
      if (d) {
         if (clauseCtr==0 && !isRetrying) {
            if (d) {
               s.logCall(this, new Term[]{a0, a1});
            }
         } else {
            if (d) {
               s.logRedo(this, new Term[]{a0, a1});
            }
         }
      }
      if (isRetrying) {
         if (retryRule0()) {
            if (d) {
               s.logExit(this, new Term[]{a0, a1});
            }
            return true;
         }
         isRetrying = false;
      } else {
         if (initRule0() && retryRule0()) {
            isRetrying = true;
            if (d) {
               s.logExit(this, new Term[]{a0, a1});
            }
            return true;
         }
      }
      if (d) {
         s.logFail(this, new Term[]{a0, a1});
      }
      return false;
   }
   public final boolean isRetryable() {
      return true;
   }
   public final boolean couldReevaluationSucceed() {
      if (c0_0==null || c0_0.couldReevaluationSucceed()) {
         return true;
      }
      return false;
   }
   public final void setKnowledgeBase(KnowledgeBase kb) {
      throw new RuntimeException();
   }
   public final Predicate getPredicate(final Term... termArgs) {
      return new %CLASS_NAME%(termArgs[0], termArgs[1]);
   }
   private static final Term INTEGER_2 = new IntegerNumber(2L);
   private static final Term INTEGER_1 = new IntegerNumber(1L);
   private static final Term FRACTION_1_5 = new DecimalFraction(1.5);
   private static final Term FRACTION_18_5 = new DecimalFraction(18.5);
   private static Calculatables c;
   private static SpyPoints.SpyPoint s;
   private final boolean d;
   private boolean isRetrying;
   private int clauseCtr;
   private int conjunctionCtr;
   private Term a0;
   private Term a1;
   private CompiledPredicateSourceGeneratorTest$3 c0_0;
   private Term v0_A;
   private Term v0_B;
   private Term v0_C;
   private Term _0;
   private Term _1;
   private Term _2;
}
