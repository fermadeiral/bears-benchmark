package org.projog.content_generated_at_runtime;
import org.projog.core.udp.compiler.*;
import org.projog.core.udp.interpreter.*;
import org.projog.core.udp.*;
import org.projog.core.term.*;
import org.projog.core.*;
import static org.projog.core.term.NumericTermComparator.NUMERIC_TERM_COMPARATOR;
// testCutManyRules/3
public final class %CLASS_NAME% implements CompiledPredicate {
   private final boolean initRule0() {
      final Term v0_X;
      v0_X = a0;
      final Term v0_Y;
      v0_Y = a1;
      final Term v0_RuleNo;
      v0_RuleNo = a2;
      if (!v0_RuleNo.unify(INTEGER_1)) {
         return false;
      }
      if (NUMERIC_TERM_COMPARATOR.compare(v0_X, INTEGER_5, c)!=1) {
         return false;
      }
      if (NUMERIC_TERM_COMPARATOR.compare(v0_Y, INTEGER_7, c)!=-1) {
         isCut = true;
         return false;
      }
      return true;
   }
   private final boolean retryRule0() {
      do {
         mainloop:
         switch (conjunctionCtr) {
            case 0:
            if (e0==null) {
               e0 = RepeatSetAmount_1.getPredicate(INTEGER_3);
            } else {
               if (e0.isRetryable()==false) {
                  isCut = true;
                  return false;
               }
            }
            if (!e0.evaluate(INTEGER_3)) {
               e0 = null;
               isCut = true;
               return false;
            }
            return true;
         }
      } while (true);
   }
   private final boolean initRule1() {
      final Term v1_X;
      v1_X = a0;
      final Term v1_Y;
      v1_Y = a1;
      final Term v1_RuleNo;
      v1_RuleNo = a2;
      if (!v1_RuleNo.unify(INTEGER_2)) {
         return false;
      }
      if (NUMERIC_TERM_COMPARATOR.compare(v1_X, INTEGER_3, c)!=-1) {
         return false;
      }
      if (NUMERIC_TERM_COMPARATOR.compare(v1_Y, INTEGER_7, c)!=-1) {
         isCut = true;
         return false;
      }
      return true;
   }
   private final boolean retryRule1() {
      do {
         mainloop:
         switch (conjunctionCtr) {
            case 0:
            if (e0==null) {
               e0 = RepeatSetAmount_1.getPredicate(INTEGER_7);
            } else {
               if (e0.isRetryable()==false) {
                  isCut = true;
                  return false;
               }
            }
            if (!e0.evaluate(INTEGER_7)) {
               e0 = null;
               isCut = true;
               return false;
            }
            case 1:
            if (e1==null) {
               e1 = RepeatSetAmount_1.getPredicate(INTEGER_3);
            } else {
               if (e1.isRetryable()==false) {
                  isCut = true;
                  return false;
               }
            }
            if (!e1.evaluate(INTEGER_3)) {
               e1 = null;
               isCut = true;
               return false;
            }
            conjunctionCtr = 1;
            isCut = true;
            return true;
         }
      } while (true);
   }
   private final boolean initRule2() {
      final Term v2_X;
      final Term v2_Y;
      final Term v2_RuleNo;
      v2_RuleNo = a2;
      if (!v2_RuleNo.unify(INTEGER_3)) {
         return false;
      }
      return true;
   }
   private final boolean initRule3() {
      final Term v3_X;
      v3_X = a0;
      final Term v3_Y;
      v3_Y = a1;
      final Term v3_RuleNo;
      v3_RuleNo = a2;
      if (!v3_RuleNo.unify(INTEGER_4)) {
         return false;
      }
      if (NUMERIC_TERM_COMPARATOR.compare(v3_X, INTEGER_3, c)!=1) {
         return false;
      }
      if (NUMERIC_TERM_COMPARATOR.compare(v3_Y, INTEGER_7, c)!=-1) {
         isCut = true;
         return false;
      }
      return true;
   }
   private final boolean retryRule3() {
      do {
         mainloop:
         switch (conjunctionCtr) {
            case 0:
            if (e0==null) {
               e0 = RepeatSetAmount_1.getPredicate(INTEGER_3);
            } else {
               if (e0.isRetryable()==false) {
                  isCut = true;
                  return false;
               }
            }
            if (!e0.evaluate(INTEGER_3)) {
               e0 = null;
               isCut = true;
               return false;
            }
            isCut = true;
            return true;
         }
      } while (true);
   }
   private final boolean initRule4() {
      final Term v4_X;
      final Term v4_Y;
      final Term v4_RuleNo;
      v4_RuleNo = a2;
      if (!v4_RuleNo.unify(INTEGER_5)) {
         return false;
      }
      return true;
   }
   private final boolean retryRule4() {
      do {
         mainloop:
         switch (conjunctionCtr) {
            case 0:
            if (e0==null) {
               e0 = RepeatSetAmount_1.getPredicate(INTEGER_2);
            } else {
               if (e0.isRetryable()==false) {
                  return false;
               }
            }
            if (!e0.evaluate(INTEGER_2)) {
               e0 = null;
               return false;
            }
            return true;
         }
      } while (true);
   }
   public %CLASS_NAME%(final KnowledgeBase _kb) {
      c = KnowledgeBaseUtils.getCalculatables(_kb);
      RepeatSetAmount_1 = (org.projog.core.function.flow.RepeatSetAmount)_kb.getPredicateFactory(new PredicateKey("repeat", 1));
   }
   %CLASS_NAME%(final Term in0, final Term in1, final Term in2) {
      a0 = in0.getTerm();
      a1 = in1.getTerm();
      a2 = in2.getTerm();
   }
   private final void backtrack() {
      a0.backtrack();
      a1.backtrack();
      a2.backtrack();
   }
   public final boolean evaluate(final Term... args) {
      if (isCut) {
         return false;
      }
      switch (clauseCtr) {
         case 0:
         if (isRetrying) {
            if (retryRule0()) {
               return true;
            }
            isRetrying = false;
         } else {
            if (initRule0() && retryRule0()) {
               isRetrying = true;
               return true;
            }
         }
         if (isCut) {
            return false;
         }
         case 1:
         if (isRetrying) {
            if (retryRule1()) {
               return true;
            }
            isRetrying = false;
         } else {
            backtrack();
            if (initRule1() && retryRule1()) {
               isRetrying = true;
               clauseCtr = 1;
               return true;
            }
         }
         if (isCut) {
            return false;
         }
         case 2:
         backtrack();
         if (initRule2()) {
            clauseCtr = 3;
            return true;
         }
         case 3:
         if (isRetrying) {
            if (retryRule3()) {
               return true;
            }
            isRetrying = false;
         } else {
            backtrack();
            if (initRule3() && retryRule3()) {
               isRetrying = true;
               clauseCtr = 3;
               return true;
            }
         }
         if (isCut) {
            return false;
         }
         case 4:
         if (isRetrying) {
            if (retryRule4()) {
               return true;
            }
            isRetrying = false;
         } else {
            backtrack();
            if (initRule4() && retryRule4()) {
               isRetrying = true;
               clauseCtr = 4;
               return true;
            }
         }
      }
      clauseCtr = 5;
      backtrack();
      return false;
   }
   public final boolean isRetryable() {
      return true;
   }
   public final boolean couldReevaluationSucceed() {
      if (clauseCtr<4) {
         return true;
      }
      if (e0==null || e0.couldReevaluationSucceed()) {
         return true;
      }
      return false;
   }
   public final void setKnowledgeBase(KnowledgeBase kb) {
      throw new RuntimeException();
   }
   public final Predicate getPredicate(final Term... termArgs) {
      return new %CLASS_NAME%(termArgs[0], termArgs[1], termArgs[2]);
   }
   private static final Term INTEGER_1 = new IntegerNumber(1L);
   private static final Term INTEGER_5 = new IntegerNumber(5L);
   private static final Term INTEGER_7 = new IntegerNumber(7L);
   private static final Term INTEGER_3 = new IntegerNumber(3L);
   private static final Term INTEGER_2 = new IntegerNumber(2L);
   private static final Term INTEGER_4 = new IntegerNumber(4L);
   private static Calculatables c;
   private static org.projog.core.function.flow.RepeatSetAmount RepeatSetAmount_1;
   private boolean isCut;
   private boolean isRetrying;
   private int clauseCtr;
   private int conjunctionCtr;
   private Term a0;
   private Term a1;
   private Term a2;
   private org.projog.core.function.flow.RepeatSetAmount e0;
   private org.projog.core.function.flow.RepeatSetAmount e1;
}
