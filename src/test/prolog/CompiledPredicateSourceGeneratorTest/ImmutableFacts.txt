package org.projog.content_generated_at_runtime;
import org.projog.core.udp.compiler.*;
import org.projog.core.udp.interpreter.*;
import org.projog.core.udp.*;
import org.projog.core.term.*;
import org.projog.core.*;
import static org.projog.core.term.NumericTermComparator.NUMERIC_TERM_COMPARATOR;
// testImmutableFacts/4
public final class %CLASS_NAME% implements CompiledPredicate {
   private final boolean initRule0() {
      v0_W = a0;
      v0_X = a1;
      v0_Y = a2;
      v0_Z = a3;
      return true;
   }
   private final boolean retryRule0() {
      do {
         mainloop:
         switch (conjunctionCtr) {
            case 0:
            if (inlinedCtr0!=0) {
               v0_W = _1;
               v0_X = _2;
               v0_Y = _3;
               v0_Z = _4;
               _0.backtrack();
            } else {
               _0 = v0_X.getTerm();
            }
            do {
               if (inlinedCtr0>2) {
                  inlinedCtr0 = 0;
                  return false;
               }
               if (_0.unify(CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_1.data[inlinedCtr0++])) {
                  break;
               } else {
                  _0.backtrack();
               }
            } while (true);
            _1 = v0_W;
            v0_W = v0_W.getTerm();
            _2 = v0_X;
            v0_X = v0_X.getTerm();
            _3 = v0_Y;
            v0_Y = v0_Y.getTerm();
            _4 = v0_Z;
            v0_Z = v0_Z.getTerm();
            case 1:
            if (inlinedCtr1!=0) {
               v0_W = _7;
               v0_X = _8;
               v0_Y = _9;
               v0_Z = _10;
               v0_0_ = _11;
               _6.backtrack();
            } else {
               _6 = v0_W.getTerm();
            }
            do {
               if (inlinedCtr1>2) {
                  inlinedCtr1 = 0;
                  conjunctionCtr = 0;
                  break mainloop;
               }
               final Term[] datainlinedCtr1 = CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.data[inlinedCtr1++];
               if (_6.unify(datainlinedCtr1[0])==false) {
                  _6.backtrack();
               }
               else
               if (_6.unify(datainlinedCtr1[2])==false) {
                  _6.backtrack();
               }
               else
               {
                  v0_0_ = datainlinedCtr1[1];
                  break;
               }
            } while (true);
            _7 = v0_W;
            v0_W = v0_W.getTerm();
            _8 = v0_X;
            v0_X = v0_X.getTerm();
            _9 = v0_Y;
            v0_Y = v0_Y.getTerm();
            _10 = v0_Z;
            v0_Z = v0_Z.getTerm();
            _11 = v0_0_;
            v0_0_ = v0_0_.getTerm();
            conjunctionCtr = 1;
            if (!IsAtom_1.evaluate(v0_W.getTerm())) {
               if (v0_W!=null) v0_W.backtrack();
               break mainloop;
            }
            case 2:
            if (inlinedCtr2!=0) {
               v0_W = _13;
               v0_X = _14;
               v0_Y = _15;
               v0_Z = _16;
               _12.backtrack();
            } else {
               _12 = v0_Y.getTerm();
            }
            do {
               if (inlinedCtr2>2) {
                  inlinedCtr2 = 0;
                  if (v0_W!=null) v0_W.backtrack();
                  conjunctionCtr = 1;
                  break mainloop;
               }
               if (_12.unify(CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_1.data[inlinedCtr2++])) {
                  break;
               } else {
                  _12.backtrack();
               }
            } while (true);
            _13 = v0_W;
            v0_W = v0_W.getTerm();
            _14 = v0_X;
            v0_X = v0_X.getTerm();
            _15 = v0_Y;
            v0_Y = v0_Y.getTerm();
            _16 = v0_Z;
            v0_Z = v0_Z.getTerm();
            conjunctionCtr = 2;
            // SingleRuleWithSingleImmutableArgumentPredicateGenerator
            if (!v0_W.unify(ATOM)) {
               break mainloop;
            }
            case 3:
            if (inlinedCtr3!=0) {
               v0_X = _18;
               v0_Y = _19;
               v0_Z = _20;
               _17.backtrack();
            } else {
               _17 = v0_Z.getTerm();
            }
            do {
               if (inlinedCtr3>2) {
                  inlinedCtr3 = 0;
                  conjunctionCtr = 2;
                  break mainloop;
               }
               if (_17.unify(CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_1.data[inlinedCtr3++])) {
                  break;
               } else {
                  _17.backtrack();
               }
            } while (true);
            _18 = v0_X;
            v0_X = v0_X.getTerm();
            _19 = v0_Y;
            v0_Y = v0_Y.getTerm();
            _20 = v0_Z;
            v0_Z = v0_Z.getTerm();
            conjunctionCtr = 3;
            if (!v0_X.unify(ATOM_0)) {
               break mainloop;
            }
            if (!v0_Y.unify(ATOM_1)) {
               break mainloop;
            }
            if (!v0_Z.unify(ATOM_2)) {
               break mainloop;
            }
            if (!IsAtom_1.evaluate(v0_X.getTerm())) {
               if (v0_X!=null) v0_X.backtrack();
               break mainloop;
            }
            if (!IsAtom_1.evaluate(v0_Y.getTerm())) {
               if (v0_X!=null) v0_X.backtrack();
               if (v0_Y!=null) v0_Y.backtrack();
               break mainloop;
            }
            if (!IsAtom_1.evaluate(v0_Z.getTerm())) {
               if (v0_X!=null) v0_X.backtrack();
               if (v0_Y!=null) v0_Y.backtrack();
               if (v0_Z!=null) v0_Z.backtrack();
               break mainloop;
            }
            case 4:
            if (inlinedCtr4!=0) {
               v0_X = _24;
               v0_Y = _25;
               v0_Z = _26;
               _21.backtrack();
               _22.backtrack();
               _23.backtrack();
            } else {
               _21 = v0_X.getTerm();
               _22 = v0_Y.getTerm();
               _23 = v0_Z.getTerm();
            }
            do {
               if (inlinedCtr4>2) {
                  inlinedCtr4 = 0;
                  if (v0_X!=null) v0_X.backtrack();
                  if (v0_Y!=null) v0_Y.backtrack();
                  if (v0_Z!=null) v0_Z.backtrack();
                  conjunctionCtr = 3;
                  break mainloop;
               }
               final Term[] datainlinedCtr4 = CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.data[inlinedCtr4++];
               if (_21.unify(datainlinedCtr4[0])==false) {
                  _21.backtrack();
               }
               else
               if (_22.unify(datainlinedCtr4[1])==false) {
                  _21.backtrack();
                  _22.backtrack();
               }
               else
               if (_23.unify(datainlinedCtr4[2])==false) {
                  _21.backtrack();
                  _22.backtrack();
                  _23.backtrack();
               }
               else
               {
                  break;
               }
            } while (true);
            _24 = v0_X;
            v0_X = v0_X.getTerm();
            _25 = v0_Y;
            v0_Y = v0_Y.getTerm();
            _26 = v0_Z;
            v0_Z = v0_Z.getTerm();
            conjunctionCtr = 4;
            return true;
         }
      } while (true);
   }
   public %CLASS_NAME%(final KnowledgeBase _kb) {
      CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_1 = (org.projog.core.udp.MultipleRulesWithSingleImmutableArgumentPredicate)((StaticUserDefinedPredicateFactory)_kb.getPredicateFactory(new PredicateKey("multiple_rules_with_single_immutable_argument", 1))).getActualPredicateFactory();
      CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3 = (org.projog.core.udp.MultipleRulesWithMultipleImmutableArgumentsPredicate)((StaticUserDefinedPredicateFactory)_kb.getPredicateFactory(new PredicateKey("multiple_rules_with_multiple_immutable_arguments", 3))).getActualPredicateFactory();
      IsAtom_1 = (org.projog.core.function.classify.IsAtom)_kb.getPredicateFactory(new PredicateKey("atom", 1));
   }
   %CLASS_NAME%(final Term in0, final Term in1, final Term in2, final Term in3) {
      a0 = in0.getTerm();
      a1 = in1.getTerm();
      a2 = in2.getTerm();
      a3 = in3.getTerm();
   }
   private final void backtrack() {
      a0.backtrack();
      a1.backtrack();
      a2.backtrack();
      a3.backtrack();
   }
   public final boolean evaluate(final Term... args) {
      if (isRetrying) {
         if (retryRule0()) {
            return true;
         }
         isRetrying = false;
      } else {
         if (initRule0() && retryRule0()) {
            isRetrying = true;
            return true;
         }
      }
      return false;
   }
   public final boolean isRetryable() {
      return true;
   }
   public final boolean couldReevaluationSucceed() {
      if (inlinedCtr0<3) {
         return true;
      }
      if (inlinedCtr1<3) {
         return true;
      }
      if (inlinedCtr2<3) {
         return true;
      }
      if (inlinedCtr3<3) {
         return true;
      }
      if (inlinedCtr4<3) {
         return true;
      }
      return false;
   }
   public final void setKnowledgeBase(KnowledgeBase kb) {
      throw new RuntimeException();
   }
   public final Predicate getPredicate(final Term... termArgs) {
      return new %CLASS_NAME%(termArgs[0], termArgs[1], termArgs[2], termArgs[3]);
   }
   private static final Term ATOM = new Atom("z");
   private static final Term ATOM_0 = new Atom("a");
   private static final Term ATOM_1 = new Atom("s");
   private static final Term ATOM_2 = new Atom("d");
   private static org.projog.core.udp.MultipleRulesWithSingleImmutableArgumentPredicate CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_1;
   private static org.projog.core.udp.MultipleRulesWithMultipleImmutableArgumentsPredicate CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3;
   private static org.projog.core.function.classify.IsAtom IsAtom_1;
   private boolean isRetrying;
   private int clauseCtr;
   private int conjunctionCtr;
   private Term a0;
   private Term a1;
   private Term a2;
   private Term a3;
   private Term v0_X;
   private Term v0_W;
   private Term v0_0_;
   private Term v0_Y;
   private Term v0_Z;
   private Term _0;
   private Term _1;
   private Term _2;
   private Term _3;
   private Term _4;
   private Term _5;
   private Term _6;
   private Term _7;
   private Term _8;
   private Term _9;
   private Term _10;
   private Term _11;
   private Term _12;
   private Term _13;
   private Term _14;
   private Term _15;
   private Term _16;
   private Term _17;
   private Term _18;
   private Term _19;
   private Term _20;
   private Term _21;
   private Term _22;
   private Term _23;
   private Term _24;
   private Term _25;
   private Term _26;
   private int inlinedCtr0;
   private int inlinedCtr1;
   private int inlinedCtr2;
   private int inlinedCtr3;
   private int inlinedCtr4;
}
