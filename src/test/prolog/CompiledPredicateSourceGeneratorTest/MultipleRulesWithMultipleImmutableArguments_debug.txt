package org.projog.content_generated_at_runtime;
import org.projog.core.udp.compiler.*;
import org.projog.core.udp.interpreter.*;
import org.projog.core.udp.*;
import org.projog.core.term.*;
import org.projog.core.*;
import static org.projog.core.term.NumericTermComparator.NUMERIC_TERM_COMPARATOR;
// testMultipleRulesWithMultipleImmutableArguments/4
public final class %CLASS_NAME% implements CompiledPredicate {
   private final boolean initRule0() {
      v0_X = a0;
      v0_Y = a1;
      v0_Z = a2;
      v0_RuleNo = a3;
      return true;
   }
   private final boolean retryRule0() {
      do {
         mainloop:
         switch (conjunctionCtr) {
            case 0:
            if (inlinedCtr0==0) {
               if (CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.isEnabled()) {
                  CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.logCall(CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3, new Term[]{v0_A, v0_B, v0_C});
               }
            } else {
               if (CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.isEnabled()) {
                  CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.logRedo(CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3, new Term[]{v0_A, v0_B, v0_C});
               }
            }
            if (inlinedCtr0>2) {
               inlinedCtr0 = 0;
               if (CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.isEnabled()) {
                  CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.logFail(CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3, new Term[]{v0_A, v0_B, v0_C});
               }
               return false;
            }
            final Term[] datainlinedCtr0 = CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.data[inlinedCtr0++];
            v0_A = datainlinedCtr0[0];
            v0_B = datainlinedCtr0[1];
            v0_C = datainlinedCtr0[2];
            if (CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.isEnabled()) {
               CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.logExit(CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3, new Term[]{v0_A, v0_B, v0_C});
            }
            if (!v0_X.unify(v0_A)) {
               if (v0_A!=null) v0_A.backtrack();
               if (v0_X!=null) v0_X.backtrack();
               break mainloop;
            }
            if (!v0_Y.unify(v0_B)) {
               if (v0_A!=null) v0_A.backtrack();
               if (v0_X!=null) v0_X.backtrack();
               if (v0_B!=null) v0_B.backtrack();
               if (v0_Y!=null) v0_Y.backtrack();
               break mainloop;
            }
            if (!v0_Z.unify(v0_C)) {
               if (v0_A!=null) v0_A.backtrack();
               if (v0_X!=null) v0_X.backtrack();
               if (v0_B!=null) v0_B.backtrack();
               if (v0_Y!=null) v0_Y.backtrack();
               if (v0_C!=null) v0_C.backtrack();
               if (v0_Z!=null) v0_Z.backtrack();
               break mainloop;
            }
            if (!v0_RuleNo.unify(INTEGER_1)) {
               if (v0_A!=null) v0_A.backtrack();
               if (v0_X!=null) v0_X.backtrack();
               if (v0_B!=null) v0_B.backtrack();
               if (v0_Y!=null) v0_Y.backtrack();
               if (v0_C!=null) v0_C.backtrack();
               if (v0_Z!=null) v0_Z.backtrack();
               if (v0_RuleNo!=null) v0_RuleNo.backtrack();
               break mainloop;
            }
            conjunctionCtr = 1;
            return true;
            case 1:
            conjunctionCtr = 0;
            if (v0_A!=null) v0_A.backtrack();
            if (v0_X!=null) v0_X.backtrack();
            if (v0_B!=null) v0_B.backtrack();
            if (v0_Y!=null) v0_Y.backtrack();
            if (v0_C!=null) v0_C.backtrack();
            if (v0_Z!=null) v0_Z.backtrack();
            if (v0_RuleNo!=null) v0_RuleNo.backtrack();
         }
      } while (true);
   }
   private final boolean initRule1() {
      v1_X = a0;
      v1_Y = a1;
      v1_Z = a2;
      v1_RuleNo = a3;
      return true;
   }
   private final boolean retryRule1() {
      do {
         mainloop:
         switch (conjunctionCtr) {
            case 0:
            if (inlinedCtr1==0) {
               if (CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.isEnabled()) {
                  CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.logCall(CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3, new Term[]{v1_A, v1_B, v1_C});
               }
            } else {
               if (CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.isEnabled()) {
                  CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.logRedo(CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3, new Term[]{v1_A, v1_B, v1_C});
               }
            }
            if (inlinedCtr1>2) {
               inlinedCtr1 = 0;
               if (CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.isEnabled()) {
                  CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.logFail(CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3, new Term[]{v1_A, v1_B, v1_C});
               }
               return false;
            }
            final Term[] datainlinedCtr1 = CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.data[inlinedCtr1++];
            v1_A = datainlinedCtr1[0];
            v1_B = datainlinedCtr1[1];
            v1_C = datainlinedCtr1[2];
            if (CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.isEnabled()) {
               CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.logExit(CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3, new Term[]{v1_A, v1_B, v1_C});
            }
            if (!v1_A.unify(v1_X)) {
               if (v1_X!=null) v1_X.backtrack();
               if (v1_A!=null) v1_A.backtrack();
               break mainloop;
            }
            if (!v1_B.unify(v1_Y)) {
               if (v1_X!=null) v1_X.backtrack();
               if (v1_A!=null) v1_A.backtrack();
               if (v1_Y!=null) v1_Y.backtrack();
               if (v1_B!=null) v1_B.backtrack();
               break mainloop;
            }
            if (!v1_C.unify(v1_Z)) {
               if (v1_X!=null) v1_X.backtrack();
               if (v1_A!=null) v1_A.backtrack();
               if (v1_Y!=null) v1_Y.backtrack();
               if (v1_B!=null) v1_B.backtrack();
               if (v1_Z!=null) v1_Z.backtrack();
               if (v1_C!=null) v1_C.backtrack();
               break mainloop;
            }
            if (!v1_RuleNo.unify(INTEGER_2)) {
               if (v1_X!=null) v1_X.backtrack();
               if (v1_A!=null) v1_A.backtrack();
               if (v1_Y!=null) v1_Y.backtrack();
               if (v1_B!=null) v1_B.backtrack();
               if (v1_Z!=null) v1_Z.backtrack();
               if (v1_C!=null) v1_C.backtrack();
               if (v1_RuleNo!=null) v1_RuleNo.backtrack();
               break mainloop;
            }
            conjunctionCtr = 1;
            return true;
            case 1:
            conjunctionCtr = 0;
            if (v1_X!=null) v1_X.backtrack();
            if (v1_A!=null) v1_A.backtrack();
            if (v1_Y!=null) v1_Y.backtrack();
            if (v1_B!=null) v1_B.backtrack();
            if (v1_Z!=null) v1_Z.backtrack();
            if (v1_C!=null) v1_C.backtrack();
            if (v1_RuleNo!=null) v1_RuleNo.backtrack();
         }
      } while (true);
   }
   private final boolean initRule2() {
      v2_X = a0;
      v2_Y = a1;
      v2_Z = a2;
      v2_RuleNo = a3;
      return true;
   }
   private final boolean retryRule2() {
      do {
         mainloop:
         switch (conjunctionCtr) {
            case 0:
            if (inlinedCtr2!=0) {
               v2_X = _1;
               v2_Y = _2;
               v2_Z = _3;
               v2_RuleNo = _4;
               v2_0_ = _5;
               _0.backtrack();
            } else {
               _0 = v2_Y.getTerm();
            }
            if (inlinedCtr2==0) {
               if (CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.isEnabled()) {
                  CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.logCall(CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3, new Term[]{v2_0_, v2_Y, ATOM});
               }
            } else {
               if (CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.isEnabled()) {
                  CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.logRedo(CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3, new Term[]{v2_0_, v2_Y, ATOM});
               }
            }
            do {
               if (inlinedCtr2>2) {
                  inlinedCtr2 = 0;
                  if (CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.isEnabled()) {
                     CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.logFail(CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3, new Term[]{v2_0_, v2_Y, ATOM});
                  }
                  return false;
               }
               final Term[] datainlinedCtr2 = CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.data[inlinedCtr2++];
               if (_0.unify(datainlinedCtr2[1])==false) {
                  _0.backtrack();
               }
               else
               if (ATOM.unify(datainlinedCtr2[2])==false) {
                  _0.backtrack();
               }
               else
               {
                  v2_0_ = datainlinedCtr2[0];
                  if (CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.isEnabled()) {
                     CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.logExit(CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3, new Term[]{v2_0_, v2_Y, ATOM});
                  }
                  break;
               }
            } while (true);
            _1 = v2_X;
            v2_X = v2_X.getTerm();
            _2 = v2_Y;
            v2_Y = v2_Y.getTerm();
            _3 = v2_Z;
            v2_Z = v2_Z.getTerm();
            _4 = v2_RuleNo;
            v2_RuleNo = v2_RuleNo.getTerm();
            _5 = v2_0_;
            v2_0_ = v2_0_.getTerm();
            if (!v2_X.unify(ATOM_0)) {
               if (v2_X!=null) v2_X.backtrack();
               break mainloop;
            }
            case 1:
            if (inlinedCtr3!=0) {
               v2_X = _9;
               v2_Y = _10;
               v2_Z = _11;
               v2_RuleNo = _12;
               _6.backtrack();
               _7.backtrack();
               _8.backtrack();
            } else {
               _6 = v2_X.getTerm();
               _7 = v2_Y.getTerm();
               _8 = v2_Z.getTerm();
            }
            if (inlinedCtr3==0) {
               if (CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.isEnabled()) {
                  CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.logCall(CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3, new Term[]{v2_X, v2_Y, v2_Z});
               }
            } else {
               if (CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.isEnabled()) {
                  CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.logRedo(CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3, new Term[]{v2_X, v2_Y, v2_Z});
               }
            }
            do {
               if (inlinedCtr3>2) {
                  inlinedCtr3 = 0;
                  if (CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.isEnabled()) {
                     CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.logFail(CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3, new Term[]{v2_X, v2_Y, v2_Z});
                  }
                  if (v2_X!=null) v2_X.backtrack();
                  conjunctionCtr = 0;
                  break mainloop;
               }
               final Term[] datainlinedCtr3 = CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.data[inlinedCtr3++];
               if (_6.unify(datainlinedCtr3[0])==false) {
                  _6.backtrack();
               }
               else
               if (_7.unify(datainlinedCtr3[1])==false) {
                  _6.backtrack();
                  _7.backtrack();
               }
               else
               if (_8.unify(datainlinedCtr3[2])==false) {
                  _6.backtrack();
                  _7.backtrack();
                  _8.backtrack();
               }
               else
               {
                  if (CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.isEnabled()) {
                     CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.logExit(CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3, new Term[]{v2_X, v2_Y, v2_Z});
                  }
                  break;
               }
            } while (true);
            _9 = v2_X;
            v2_X = v2_X.getTerm();
            _10 = v2_Y;
            v2_Y = v2_Y.getTerm();
            _11 = v2_Z;
            v2_Z = v2_Z.getTerm();
            _12 = v2_RuleNo;
            v2_RuleNo = v2_RuleNo.getTerm();
            conjunctionCtr = 1;
            if (!v2_RuleNo.unify(INTEGER_3)) {
               if (v2_RuleNo!=null) v2_RuleNo.backtrack();
               break mainloop;
            }
            conjunctionCtr = 2;
            return true;
            case 2:
            conjunctionCtr = 1;
            if (v2_RuleNo!=null) v2_RuleNo.backtrack();
         }
      } while (true);
   }
   private final boolean initRule3() {
      v3_X = a0;
      v3_Y = a1;
      v3_Z = a2;
      v3_RuleNo = a3;
      return true;
   }
   private final boolean retryRule3() {
      do {
         mainloop:
         switch (conjunctionCtr) {
            case 0:
            if (v3_A==null) {
               v3_A = new Variable("A");
            }
            if (inlinedCtr4!=0) {
               v3_X = _16;
               v3_Y = _17;
               v3_Z = _18;
               v3_RuleNo = _19;
               v3_A = _20;
               _15.backtrack();
               _14.backtrack();
            } else {
               _15 = v3_A.getTerm();
               _14 = v3_Y.getTerm();
            }
            if (inlinedCtr4==0) {
               if (CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.isEnabled()) {
                  CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.logCall(CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3, new Term[]{v3_A, v3_Y, v3_A});
               }
            } else {
               if (CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.isEnabled()) {
                  CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.logRedo(CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3, new Term[]{v3_A, v3_Y, v3_A});
               }
            }
            do {
               if (inlinedCtr4>2) {
                  inlinedCtr4 = 0;
                  if (CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.isEnabled()) {
                     CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.logFail(CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3, new Term[]{v3_A, v3_Y, v3_A});
                  }
                  return false;
               }
               final Term[] datainlinedCtr4 = CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.data[inlinedCtr4++];
               if (_15.unify(datainlinedCtr4[0])==false) {
                  _15.backtrack();
               }
               else
               if (_14.unify(datainlinedCtr4[1])==false) {
                  _15.backtrack();
                  _14.backtrack();
               }
               else
               if (_15.unify(datainlinedCtr4[2])==false) {
                  _15.backtrack();
                  _14.backtrack();
               }
               else
               {
                  if (CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.isEnabled()) {
                     CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.logExit(CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3, new Term[]{v3_A, v3_Y, v3_A});
                  }
                  break;
               }
            } while (true);
            _16 = v3_X;
            v3_X = v3_X.getTerm();
            _17 = v3_Y;
            v3_Y = v3_Y.getTerm();
            _18 = v3_Z;
            v3_Z = v3_Z.getTerm();
            _19 = v3_RuleNo;
            v3_RuleNo = v3_RuleNo.getTerm();
            _20 = v3_A;
            v3_A = v3_A.getTerm();
            if (!v3_A.unify(v3_X)) {
               if (v3_X!=null) v3_X.backtrack();
               if (v3_A!=null) v3_A.backtrack();
               break mainloop;
            }
            if (!v3_Z.unify(v3_A)) {
               if (v3_X!=null) v3_X.backtrack();
               if (v3_A!=null) v3_A.backtrack();
               if (v3_Z!=null) v3_Z.backtrack();
               break mainloop;
            }
            if (!v3_RuleNo.unify(INTEGER_4)) {
               if (v3_X!=null) v3_X.backtrack();
               if (v3_A!=null) v3_A.backtrack();
               if (v3_Z!=null) v3_Z.backtrack();
               if (v3_RuleNo!=null) v3_RuleNo.backtrack();
               break mainloop;
            }
            conjunctionCtr = 1;
            return true;
            case 1:
            conjunctionCtr = 0;
            if (v3_X!=null) v3_X.backtrack();
            if (v3_A!=null) v3_A.backtrack();
            if (v3_Z!=null) v3_Z.backtrack();
            if (v3_RuleNo!=null) v3_RuleNo.backtrack();
         }
      } while (true);
   }
   private final boolean initRule4() {
      final Term v4_X;
      final Term v4_Y;
      final Term v4_Z;
      v4_RuleNo = a3;
      return true;
   }
   private final boolean retryRule4() {
      do {
         mainloop:
         switch (conjunctionCtr) {
            case 0:
            if (inlinedCtr5!=0) {
               v4_RuleNo = _21;
            } else {
            }
            if (inlinedCtr5==0) {
               if (CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.isEnabled()) {
                  CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.logCall(CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3, new Term[]{ATOM_0, ATOM_1, ATOM_2});
               }
            } else {
               if (CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.isEnabled()) {
                  CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.logRedo(CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3, new Term[]{ATOM_0, ATOM_1, ATOM_2});
               }
            }
            do {
               if (inlinedCtr5>2) {
                  inlinedCtr5 = 0;
                  if (CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.isEnabled()) {
                     CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.logFail(CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3, new Term[]{ATOM_0, ATOM_1, ATOM_2});
                  }
                  return false;
               }
               final Term[] datainlinedCtr5 = CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.data[inlinedCtr5++];
               if (ATOM_0.unify(datainlinedCtr5[0])==false) {
               }
               else
               if (ATOM_1.unify(datainlinedCtr5[1])==false) {
               }
               else
               if (ATOM_2.unify(datainlinedCtr5[2])==false) {
               }
               else
               {
                  if (CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.isEnabled()) {
                     CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.logExit(CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3, new Term[]{ATOM_0, ATOM_1, ATOM_2});
                  }
                  break;
               }
            } while (true);
            _21 = v4_RuleNo;
            v4_RuleNo = v4_RuleNo.getTerm();
            if (!v4_RuleNo.unify(INTEGER_5)) {
               if (v4_RuleNo!=null) v4_RuleNo.backtrack();
               break mainloop;
            }
            conjunctionCtr = 1;
            return true;
            case 1:
            conjunctionCtr = 0;
            if (v4_RuleNo!=null) v4_RuleNo.backtrack();
         }
      } while (true);
   }
   private final boolean initRule5() {
      final Term v5_X;
      final Term v5_Y;
      final Term v5_Z;
      v5_RuleNo = a3;
      return true;
   }
   private final boolean retryRule5() {
      do {
         mainloop:
         switch (conjunctionCtr) {
            case 0:
            if (inlinedCtr6!=0) {
               v5_RuleNo = _22;
            } else {
            }
            if (inlinedCtr6==0) {
               if (CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.isEnabled()) {
                  CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.logCall(CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3, new Term[]{ATOM_0, ATOM_3, ATOM});
               }
            } else {
               if (CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.isEnabled()) {
                  CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.logRedo(CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3, new Term[]{ATOM_0, ATOM_3, ATOM});
               }
            }
            do {
               if (inlinedCtr6>2) {
                  inlinedCtr6 = 0;
                  if (CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.isEnabled()) {
                     CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.logFail(CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3, new Term[]{ATOM_0, ATOM_3, ATOM});
                  }
                  return false;
               }
               final Term[] datainlinedCtr6 = CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.data[inlinedCtr6++];
               if (ATOM_0.unify(datainlinedCtr6[0])==false) {
               }
               else
               if (ATOM_3.unify(datainlinedCtr6[1])==false) {
               }
               else
               if (ATOM.unify(datainlinedCtr6[2])==false) {
               }
               else
               {
                  if (CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.isEnabled()) {
                     CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.logExit(CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3, new Term[]{ATOM_0, ATOM_3, ATOM});
                  }
                  break;
               }
            } while (true);
            _22 = v5_RuleNo;
            v5_RuleNo = v5_RuleNo.getTerm();
            if (!v5_RuleNo.unify(INTEGER_6)) {
               if (v5_RuleNo!=null) v5_RuleNo.backtrack();
               break mainloop;
            }
            conjunctionCtr = 1;
            return true;
            case 1:
            conjunctionCtr = 0;
            if (v5_RuleNo!=null) v5_RuleNo.backtrack();
         }
      } while (true);
   }
   private final boolean initRule6() {
      final Term v6_X;
      final Term v6_Y;
      final Term v6_Z;
      v6_RuleNo = a3;
      return true;
   }
   private final boolean retryRule6() {
      do {
         mainloop:
         switch (conjunctionCtr) {
            case 0:
            if (inlinedCtr7!=0) {
               v6_RuleNo = _23;
            } else {
            }
            if (inlinedCtr7==0) {
               if (CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.isEnabled()) {
                  CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.logCall(CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3, new Term[]{ATOM_3, ATOM_1, ATOM_2});
               }
            } else {
               if (CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.isEnabled()) {
                  CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.logRedo(CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3, new Term[]{ATOM_3, ATOM_1, ATOM_2});
               }
            }
            do {
               if (inlinedCtr7>2) {
                  inlinedCtr7 = 0;
                  if (CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.isEnabled()) {
                     CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.logFail(CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3, new Term[]{ATOM_3, ATOM_1, ATOM_2});
                  }
                  return false;
               }
               final Term[] datainlinedCtr7 = CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.data[inlinedCtr7++];
               if (ATOM_3.unify(datainlinedCtr7[0])==false) {
               }
               else
               if (ATOM_1.unify(datainlinedCtr7[1])==false) {
               }
               else
               if (ATOM_2.unify(datainlinedCtr7[2])==false) {
               }
               else
               {
                  if (CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.isEnabled()) {
                     CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.logExit(CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3, new Term[]{ATOM_3, ATOM_1, ATOM_2});
                  }
                  break;
               }
            } while (true);
            _23 = v6_RuleNo;
            v6_RuleNo = v6_RuleNo.getTerm();
            if (!v6_RuleNo.unify(INTEGER_7)) {
               if (v6_RuleNo!=null) v6_RuleNo.backtrack();
               break mainloop;
            }
            conjunctionCtr = 1;
            return true;
            case 1:
            conjunctionCtr = 0;
            if (v6_RuleNo!=null) v6_RuleNo.backtrack();
         }
      } while (true);
   }
   private final boolean initRule7() {
      final Term v7_X;
      final Term v7_Y;
      final Term v7_Z;
      v7_RuleNo = a3;
      return true;
   }
   private final boolean retryRule7() {
      do {
         mainloop:
         switch (conjunctionCtr) {
            case 0:
            if (inlinedCtr8!=0) {
               v7_RuleNo = _24;
            } else {
            }
            if (inlinedCtr8==0) {
               if (CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.isEnabled()) {
                  CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.logCall(CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3, new Term[]{ATOM_0, ATOM, ATOM_1});
               }
            } else {
               if (CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.isEnabled()) {
                  CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.logRedo(CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3, new Term[]{ATOM_0, ATOM, ATOM_1});
               }
            }
            do {
               if (inlinedCtr8>2) {
                  inlinedCtr8 = 0;
                  if (CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.isEnabled()) {
                     CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.logFail(CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3, new Term[]{ATOM_0, ATOM, ATOM_1});
                  }
                  return false;
               }
               final Term[] datainlinedCtr8 = CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.data[inlinedCtr8++];
               if (ATOM_0.unify(datainlinedCtr8[0])==false) {
               }
               else
               if (ATOM.unify(datainlinedCtr8[1])==false) {
               }
               else
               if (ATOM_1.unify(datainlinedCtr8[2])==false) {
               }
               else
               {
                  if (CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.isEnabled()) {
                     CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.logExit(CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3, new Term[]{ATOM_0, ATOM, ATOM_1});
                  }
                  break;
               }
            } while (true);
            _24 = v7_RuleNo;
            v7_RuleNo = v7_RuleNo.getTerm();
            if (!v7_RuleNo.unify(INTEGER_8)) {
               if (v7_RuleNo!=null) v7_RuleNo.backtrack();
               break mainloop;
            }
            conjunctionCtr = 1;
            return true;
            case 1:
            conjunctionCtr = 0;
            if (v7_RuleNo!=null) v7_RuleNo.backtrack();
         }
      } while (true);
   }
   private final boolean initRule8() {
      final Term v8_X;
      final Term v8_Y;
      final Term v8_Z;
      v8_RuleNo = a3;
      return true;
   }
   private final boolean retryRule8() {
      do {
         mainloop:
         switch (conjunctionCtr) {
            case 0:
            if (inlinedCtr9!=0) {
               v8_RuleNo = _25;
            } else {
            }
            if (inlinedCtr9==0) {
               if (CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.isEnabled()) {
                  CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.logCall(CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3, new Term[]{ATOM_0, ATOM_1, ATOM});
               }
            } else {
               if (CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.isEnabled()) {
                  CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.logRedo(CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3, new Term[]{ATOM_0, ATOM_1, ATOM});
               }
            }
            do {
               if (inlinedCtr9>2) {
                  inlinedCtr9 = 0;
                  if (CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.isEnabled()) {
                     CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.logFail(CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3, new Term[]{ATOM_0, ATOM_1, ATOM});
                  }
                  return false;
               }
               final Term[] datainlinedCtr9 = CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.data[inlinedCtr9++];
               if (ATOM_0.unify(datainlinedCtr9[0])==false) {
               }
               else
               if (ATOM_1.unify(datainlinedCtr9[1])==false) {
               }
               else
               if (ATOM.unify(datainlinedCtr9[2])==false) {
               }
               else
               {
                  if (CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.isEnabled()) {
                     CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.logExit(CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3, new Term[]{ATOM_0, ATOM_1, ATOM});
                  }
                  break;
               }
            } while (true);
            _25 = v8_RuleNo;
            v8_RuleNo = v8_RuleNo.getTerm();
            case 1:
            if (inlinedCtr10!=0) {
               v8_RuleNo = _26;
            } else {
            }
            if (inlinedCtr10==0) {
               if (CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.isEnabled()) {
                  CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.logCall(CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3, new Term[]{ATOM_4, ATOM_5, ATOM_6});
               }
            } else {
               if (CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.isEnabled()) {
                  CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.logRedo(CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3, new Term[]{ATOM_4, ATOM_5, ATOM_6});
               }
            }
            do {
               if (inlinedCtr10>2) {
                  inlinedCtr10 = 0;
                  if (CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.isEnabled()) {
                     CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.logFail(CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3, new Term[]{ATOM_4, ATOM_5, ATOM_6});
                  }
                  conjunctionCtr = 0;
                  break mainloop;
               }
               final Term[] datainlinedCtr10 = CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.data[inlinedCtr10++];
               if (ATOM_4.unify(datainlinedCtr10[0])==false) {
               }
               else
               if (ATOM_5.unify(datainlinedCtr10[1])==false) {
               }
               else
               if (ATOM_6.unify(datainlinedCtr10[2])==false) {
               }
               else
               {
                  if (CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.isEnabled()) {
                     CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.logExit(CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3, new Term[]{ATOM_4, ATOM_5, ATOM_6});
                  }
                  break;
               }
            } while (true);
            _26 = v8_RuleNo;
            v8_RuleNo = v8_RuleNo.getTerm();
            conjunctionCtr = 1;
            case 2:
            if (inlinedCtr11!=0) {
               v8_RuleNo = _27;
            } else {
            }
            if (inlinedCtr11==0) {
               if (CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.isEnabled()) {
                  CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.logCall(CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3, new Term[]{ATOM_2, ATOM_7, ATOM_2});
               }
            } else {
               if (CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.isEnabled()) {
                  CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.logRedo(CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3, new Term[]{ATOM_2, ATOM_7, ATOM_2});
               }
            }
            do {
               if (inlinedCtr11>2) {
                  inlinedCtr11 = 0;
                  if (CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.isEnabled()) {
                     CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.logFail(CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3, new Term[]{ATOM_2, ATOM_7, ATOM_2});
                  }
                  conjunctionCtr = 1;
                  break mainloop;
               }
               final Term[] datainlinedCtr11 = CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.data[inlinedCtr11++];
               if (ATOM_2.unify(datainlinedCtr11[0])==false) {
               }
               else
               if (ATOM_7.unify(datainlinedCtr11[1])==false) {
               }
               else
               if (ATOM_2.unify(datainlinedCtr11[2])==false) {
               }
               else
               {
                  if (CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.isEnabled()) {
                     CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.logExit(CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3, new Term[]{ATOM_2, ATOM_7, ATOM_2});
                  }
                  break;
               }
            } while (true);
            _27 = v8_RuleNo;
            v8_RuleNo = v8_RuleNo.getTerm();
            conjunctionCtr = 2;
            if (!v8_RuleNo.unify(INTEGER_9)) {
               if (v8_RuleNo!=null) v8_RuleNo.backtrack();
               break mainloop;
            }
            conjunctionCtr = 3;
            return true;
            case 3:
            conjunctionCtr = 2;
            if (v8_RuleNo!=null) v8_RuleNo.backtrack();
         }
      } while (true);
   }
   private final boolean initRule9() {
      v9_X = a0;
      v9_Y = a1;
      v9_Z = a2;
      v9_RuleNo = a3;
      return true;
   }
   private final boolean retryRule9() {
      do {
         mainloop:
         switch (conjunctionCtr) {
            case 0:
            if (inlinedCtr12!=0) {
               v9_X = _29;
               v9_Y = _30;
               v9_Z = _31;
               v9_RuleNo = _32;
               _28.backtrack();
            } else {
               _28 = v9_X.getTerm();
            }
            if (inlinedCtr12==0) {
               if (CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.isEnabled()) {
                  CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.logCall(CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3, new Term[]{v9_X, ATOM_1, ATOM});
               }
            } else {
               if (CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.isEnabled()) {
                  CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.logRedo(CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3, new Term[]{v9_X, ATOM_1, ATOM});
               }
            }
            do {
               if (inlinedCtr12>2) {
                  inlinedCtr12 = 0;
                  if (CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.isEnabled()) {
                     CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.logFail(CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3, new Term[]{v9_X, ATOM_1, ATOM});
                  }
                  return false;
               }
               final Term[] datainlinedCtr12 = CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.data[inlinedCtr12++];
               if (_28.unify(datainlinedCtr12[0])==false) {
                  _28.backtrack();
               }
               else
               if (ATOM_1.unify(datainlinedCtr12[1])==false) {
                  _28.backtrack();
               }
               else
               if (ATOM.unify(datainlinedCtr12[2])==false) {
                  _28.backtrack();
               }
               else
               {
                  if (CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.isEnabled()) {
                     CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.logExit(CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3, new Term[]{v9_X, ATOM_1, ATOM});
                  }
                  break;
               }
            } while (true);
            _29 = v9_X;
            v9_X = v9_X.getTerm();
            _30 = v9_Y;
            v9_Y = v9_Y.getTerm();
            _31 = v9_Z;
            v9_Z = v9_Z.getTerm();
            _32 = v9_RuleNo;
            v9_RuleNo = v9_RuleNo.getTerm();
            case 1:
            if (inlinedCtr13!=0) {
               v9_Y = _34;
               v9_Z = _35;
               v9_RuleNo = _36;
               _33.backtrack();
            } else {
               _33 = v9_Y.getTerm();
            }
            if (inlinedCtr13==0) {
               if (CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.isEnabled()) {
                  CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.logCall(CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3, new Term[]{ATOM_4, v9_Y, ATOM_6});
               }
            } else {
               if (CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.isEnabled()) {
                  CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.logRedo(CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3, new Term[]{ATOM_4, v9_Y, ATOM_6});
               }
            }
            do {
               if (inlinedCtr13>2) {
                  inlinedCtr13 = 0;
                  if (CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.isEnabled()) {
                     CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.logFail(CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3, new Term[]{ATOM_4, v9_Y, ATOM_6});
                  }
                  conjunctionCtr = 0;
                  break mainloop;
               }
               final Term[] datainlinedCtr13 = CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.data[inlinedCtr13++];
               if (ATOM_4.unify(datainlinedCtr13[0])==false) {
               }
               else
               if (_33.unify(datainlinedCtr13[1])==false) {
                  _33.backtrack();
               }
               else
               if (ATOM_6.unify(datainlinedCtr13[2])==false) {
                  _33.backtrack();
               }
               else
               {
                  if (CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.isEnabled()) {
                     CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.logExit(CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3, new Term[]{ATOM_4, v9_Y, ATOM_6});
                  }
                  break;
               }
            } while (true);
            _34 = v9_Y;
            v9_Y = v9_Y.getTerm();
            _35 = v9_Z;
            v9_Z = v9_Z.getTerm();
            _36 = v9_RuleNo;
            v9_RuleNo = v9_RuleNo.getTerm();
            conjunctionCtr = 1;
            case 2:
            if (inlinedCtr14!=0) {
               v9_Z = _38;
               v9_RuleNo = _39;
               _37.backtrack();
            } else {
               _37 = v9_Z.getTerm();
            }
            if (inlinedCtr14==0) {
               if (CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.isEnabled()) {
                  CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.logCall(CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3, new Term[]{ATOM_2, ATOM_7, v9_Z});
               }
            } else {
               if (CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.isEnabled()) {
                  CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.logRedo(CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3, new Term[]{ATOM_2, ATOM_7, v9_Z});
               }
            }
            do {
               if (inlinedCtr14>2) {
                  inlinedCtr14 = 0;
                  if (CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.isEnabled()) {
                     CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.logFail(CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3, new Term[]{ATOM_2, ATOM_7, v9_Z});
                  }
                  conjunctionCtr = 1;
                  break mainloop;
               }
               final Term[] datainlinedCtr14 = CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.data[inlinedCtr14++];
               if (ATOM_2.unify(datainlinedCtr14[0])==false) {
               }
               else
               if (ATOM_7.unify(datainlinedCtr14[1])==false) {
               }
               else
               if (_37.unify(datainlinedCtr14[2])==false) {
                  _37.backtrack();
               }
               else
               {
                  if (CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.isEnabled()) {
                     CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3.spyPoint.logExit(CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3, new Term[]{ATOM_2, ATOM_7, v9_Z});
                  }
                  break;
               }
            } while (true);
            _38 = v9_Z;
            v9_Z = v9_Z.getTerm();
            _39 = v9_RuleNo;
            v9_RuleNo = v9_RuleNo.getTerm();
            conjunctionCtr = 2;
            if (!v9_RuleNo.unify(INTEGER_10)) {
               if (v9_RuleNo!=null) v9_RuleNo.backtrack();
               break mainloop;
            }
            conjunctionCtr = 3;
            return true;
            case 3:
            conjunctionCtr = 2;
            if (v9_RuleNo!=null) v9_RuleNo.backtrack();
         }
      } while (true);
   }
   public %CLASS_NAME%(final KnowledgeBase _kb) {
      s = KnowledgeBaseUtils.getSpyPoints(_kb).getSpyPoint(new PredicateKey("testMultipleRulesWithMultipleImmutableArguments", 4));
      d = false;
      CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3 = (org.projog.core.udp.MultipleRulesWithMultipleImmutableArgumentsPredicate)((StaticUserDefinedPredicateFactory)_kb.getPredicateFactory(new PredicateKey("multiple_rules_with_multiple_immutable_arguments", 3))).getActualPredicateFactory();
   }
   %CLASS_NAME%(final Term in0, final Term in1, final Term in2, final Term in3) {
      a0 = in0.getTerm();
      a1 = in1.getTerm();
      a2 = in2.getTerm();
      a3 = in3.getTerm();
      d = s.isEnabled();
   }
   private final void backtrack() {
      a0.backtrack();
      a1.backtrack();
      a2.backtrack();
      a3.backtrack();
   }
   public final boolean evaluate(final Term... args) {
      if (d) {
         if (clauseCtr==0 && !isRetrying) {
            if (d) {
               s.logCall(this, new Term[]{a0, a1, a2, a3});
            }
         } else {
            if (d) {
               s.logRedo(this, new Term[]{a0, a1, a2, a3});
            }
         }
      }
      switch (clauseCtr) {
         case 0:
         if (isRetrying) {
            if (retryRule0()) {
               if (d) {
                  s.logExit(this, new Term[]{a0, a1, a2, a3});
               }
               return true;
            }
            isRetrying = false;
         } else {
            if (initRule0() && retryRule0()) {
               isRetrying = true;
               if (d) {
                  s.logExit(this, new Term[]{a0, a1, a2, a3});
               }
               return true;
            }
         }
         case 1:
         if (isRetrying) {
            if (retryRule1()) {
               if (d) {
                  s.logExit(this, new Term[]{a0, a1, a2, a3});
               }
               return true;
            }
            isRetrying = false;
         } else {
            backtrack();
            if (initRule1() && retryRule1()) {
               isRetrying = true;
               clauseCtr = 1;
               if (d) {
                  s.logExit(this, new Term[]{a0, a1, a2, a3});
               }
               return true;
            }
         }
         case 2:
         if (isRetrying) {
            if (retryRule2()) {
               if (d) {
                  s.logExit(this, new Term[]{a0, a1, a2, a3});
               }
               return true;
            }
            isRetrying = false;
         } else {
            backtrack();
            if (initRule2() && retryRule2()) {
               isRetrying = true;
               clauseCtr = 2;
               if (d) {
                  s.logExit(this, new Term[]{a0, a1, a2, a3});
               }
               return true;
            }
         }
         case 3:
         if (isRetrying) {
            if (retryRule3()) {
               if (d) {
                  s.logExit(this, new Term[]{a0, a1, a2, a3});
               }
               return true;
            }
            isRetrying = false;
         } else {
            backtrack();
            if (initRule3() && retryRule3()) {
               isRetrying = true;
               clauseCtr = 3;
               if (d) {
                  s.logExit(this, new Term[]{a0, a1, a2, a3});
               }
               return true;
            }
         }
         case 4:
         if (isRetrying) {
            if (retryRule4()) {
               if (d) {
                  s.logExit(this, new Term[]{a0, a1, a2, a3});
               }
               return true;
            }
            isRetrying = false;
         } else {
            backtrack();
            if (initRule4() && retryRule4()) {
               isRetrying = true;
               clauseCtr = 4;
               if (d) {
                  s.logExit(this, new Term[]{a0, a1, a2, a3});
               }
               return true;
            }
         }
         case 5:
         if (isRetrying) {
            if (retryRule5()) {
               if (d) {
                  s.logExit(this, new Term[]{a0, a1, a2, a3});
               }
               return true;
            }
            isRetrying = false;
         } else {
            backtrack();
            if (initRule5() && retryRule5()) {
               isRetrying = true;
               clauseCtr = 5;
               if (d) {
                  s.logExit(this, new Term[]{a0, a1, a2, a3});
               }
               return true;
            }
         }
         case 6:
         if (isRetrying) {
            if (retryRule6()) {
               if (d) {
                  s.logExit(this, new Term[]{a0, a1, a2, a3});
               }
               return true;
            }
            isRetrying = false;
         } else {
            backtrack();
            if (initRule6() && retryRule6()) {
               isRetrying = true;
               clauseCtr = 6;
               if (d) {
                  s.logExit(this, new Term[]{a0, a1, a2, a3});
               }
               return true;
            }
         }
         case 7:
         if (isRetrying) {
            if (retryRule7()) {
               if (d) {
                  s.logExit(this, new Term[]{a0, a1, a2, a3});
               }
               return true;
            }
            isRetrying = false;
         } else {
            backtrack();
            if (initRule7() && retryRule7()) {
               isRetrying = true;
               clauseCtr = 7;
               if (d) {
                  s.logExit(this, new Term[]{a0, a1, a2, a3});
               }
               return true;
            }
         }
         case 8:
         if (isRetrying) {
            if (retryRule8()) {
               if (d) {
                  s.logExit(this, new Term[]{a0, a1, a2, a3});
               }
               return true;
            }
            isRetrying = false;
         } else {
            backtrack();
            if (initRule8() && retryRule8()) {
               isRetrying = true;
               clauseCtr = 8;
               if (d) {
                  s.logExit(this, new Term[]{a0, a1, a2, a3});
               }
               return true;
            }
         }
         case 9:
         if (isRetrying) {
            if (retryRule9()) {
               if (d) {
                  s.logExit(this, new Term[]{a0, a1, a2, a3});
               }
               return true;
            }
            isRetrying = false;
         } else {
            backtrack();
            if (initRule9() && retryRule9()) {
               isRetrying = true;
               clauseCtr = 9;
               if (d) {
                  s.logExit(this, new Term[]{a0, a1, a2, a3});
               }
               return true;
            }
         }
      }
      clauseCtr = 10;
      backtrack();
      if (d) {
         s.logFail(this, new Term[]{a0, a1, a2, a3});
      }
      return false;
   }
   public final boolean isRetryable() {
      return true;
   }
   public final boolean couldReevaluationSucceed() {
      if (clauseCtr<9) {
         return true;
      }
      if (inlinedCtr0<3) {
         return true;
      }
      if (inlinedCtr1<3) {
         return true;
      }
      if (inlinedCtr2<3) {
         return true;
      }
      return false;
   }
   public final void setKnowledgeBase(KnowledgeBase kb) {
      throw new RuntimeException();
   }
   public final Predicate getPredicate(final Term... termArgs) {
      return new %CLASS_NAME%(termArgs[0], termArgs[1], termArgs[2], termArgs[3]);
   }
   private static final Term INTEGER_1 = new IntegerNumber(1L);
   private static final Term INTEGER_2 = new IntegerNumber(2L);
   private static final Term ATOM = new Atom("e");
   private static final Term ATOM_0 = new Atom("q");
   private static final Term INTEGER_3 = new IntegerNumber(3L);
   private static final Term INTEGER_4 = new IntegerNumber(4L);
   private static final Term ATOM_1 = new Atom("w");
   private static final Term ATOM_2 = new Atom("z");
   private static final Term INTEGER_5 = new IntegerNumber(5L);
   private static final Term ATOM_3 = new Atom("y");
   private static final Term INTEGER_6 = new IntegerNumber(6L);
   private static final Term INTEGER_7 = new IntegerNumber(7L);
   private static final Term INTEGER_8 = new IntegerNumber(8L);
   private static final Term ATOM_4 = new Atom("a");
   private static final Term ATOM_5 = new Atom("s");
   private static final Term ATOM_6 = new Atom("d");
   private static final Term ATOM_7 = new Atom("x");
   private static final Term INTEGER_9 = new IntegerNumber(9L);
   private static final Term INTEGER_10 = new IntegerNumber(10L);
   private static org.projog.core.udp.MultipleRulesWithMultipleImmutableArgumentsPredicate CompiledPredicateSourceGeneratorTest$DummyUserDefinedPredicateFactory_3;
   private static SpyPoints.SpyPoint s;
   private final boolean d;
   private boolean isRetrying;
   private int clauseCtr;
   private int conjunctionCtr;
   private Term a0;
   private Term a1;
   private Term a2;
   private Term a3;
   private Term v0_A;
   private Term v0_B;
   private Term v0_C;
   private Term v0_X;
   private Term v0_Y;
   private Term v0_Z;
   private Term v0_RuleNo;
   private Term v1_A;
   private Term v1_B;
   private Term v1_C;
   private Term v1_X;
   private Term v1_Y;
   private Term v1_Z;
   private Term v1_RuleNo;
   private Term v2_0_;
   private Term v2_Y;
   private Term v2_X;
   private Term v2_Z;
   private Term v2_RuleNo;
   private Term v3_A;
   private Term v3_Y;
   private Term v3_X;
   private Term v3_Z;
   private Term v3_RuleNo;
   private Term v4_RuleNo;
   private Term v5_RuleNo;
   private Term v6_RuleNo;
   private Term v7_RuleNo;
   private Term v8_RuleNo;
   private Term v9_X;
   private Term v9_Y;
   private Term v9_Z;
   private Term v9_RuleNo;
   private Term _0;
   private Term _1;
   private Term _2;
   private Term _3;
   private Term _4;
   private Term _5;
   private Term _6;
   private Term _7;
   private Term _8;
   private Term _9;
   private Term _10;
   private Term _11;
   private Term _12;
   private Term _13;
   private Term _14;
   private Term _15;
   private Term _16;
   private Term _17;
   private Term _18;
   private Term _19;
   private Term _20;
   private Term _21;
   private Term _22;
   private Term _23;
   private Term _24;
   private Term _25;
   private Term _26;
   private Term _27;
   private Term _28;
   private Term _29;
   private Term _30;
   private Term _31;
   private Term _32;
   private Term _33;
   private Term _34;
   private Term _35;
   private Term _36;
   private Term _37;
   private Term _38;
   private Term _39;
   private int inlinedCtr0;
   private int inlinedCtr1;
   private int inlinedCtr2;
   private int inlinedCtr3;
   private int inlinedCtr4;
   private int inlinedCtr5;
   private int inlinedCtr6;
   private int inlinedCtr7;
   private int inlinedCtr8;
   private int inlinedCtr9;
   private int inlinedCtr10;
   private int inlinedCtr11;
   private int inlinedCtr12;
   private int inlinedCtr13;
   private int inlinedCtr14;
}
