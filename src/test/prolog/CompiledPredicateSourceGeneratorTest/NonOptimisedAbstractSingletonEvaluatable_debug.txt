package org.projog.content_generated_at_runtime;
import org.projog.core.udp.compiler.*;
import org.projog.core.udp.interpreter.*;
import org.projog.core.udp.*;
import org.projog.core.term.*;
import org.projog.core.*;
import static org.projog.core.term.NumericTermComparator.NUMERIC_TERM_COMPARATOR;
// testNonOptimisedAbstractSingletonEvaluatable/1
public final class %CLASS_NAME% implements CompiledPredicate {
   private static final boolean initRule0(final Term a0) {
      final Term v0_X;
      v0_X = a0;
      if (!IsAtom_1.evaluate(v0_X.getTerm())) {
         return false;
      }
      if (!TermLessThan_2.evaluate(v0_X.getTerm(), ATOM.getTerm())) {
         return false;
      }
      return true;
   }
   public %CLASS_NAME%(final KnowledgeBase _kb) {
      s = KnowledgeBaseUtils.getSpyPoints(_kb).getSpyPoint(new PredicateKey("testNonOptimisedAbstractSingletonEvaluatable", 1));
      IsAtom_1 = (org.projog.core.function.classify.IsAtom)_kb.getPredicateFactory(new PredicateKey("atom", 1));
      TermLessThan_2 = (org.projog.core.function.compare.TermLessThan)_kb.getPredicateFactory(new PredicateKey("@<", 2));
   }
   public final boolean evaluate(final Term... args) {
      return staticEvaluate(args[0]);
   }
   static final boolean staticEvaluate(final Term a0) {
      final boolean d = s.isEnabled();
      if (d) {
         s.logCall(%CLASS_NAME%.class, new Term[]{a0});
      }
      return initRule0(a0);
   }
   public final boolean isRetryable() {
      return false;
   }
   public final boolean couldReevaluationSucceed() {
      return false;
   }
   public final void setKnowledgeBase(KnowledgeBase kb) {
      throw new RuntimeException();
   }
   public final Predicate getPredicate(final Term... termArgs) {
      return this;
   }
   private static final Term ATOM = new Atom("b");
   private static org.projog.core.function.classify.IsAtom IsAtom_1;
   private static org.projog.core.function.compare.TermLessThan TermLessThan_2;
   private static SpyPoints.SpyPoint s;
}
