package org.projog.content_generated_at_runtime;
import org.projog.core.udp.compiler.*;
import org.projog.core.udp.interpreter.*;
import org.projog.core.udp.*;
import org.projog.core.term.*;
import org.projog.core.*;
import static org.projog.core.term.NumericTermComparator.NUMERIC_TERM_COMPARATOR;
// testNumericComparison/3
public final class %CLASS_NAME% implements CompiledPredicate {
   private final boolean initRule0() {
      final Term v0_A;
      v0_A = a0;
      final Term v0_B;
      v0_B = a1;
      final Term v0_C;
      v0_C = a2;
      if (NUMERIC_TERM_COMPARATOR.compare(v0_A, v0_B, c)!=1) {
         return false;
      }
      if (NUMERIC_TERM_COMPARATOR.compare(v0_A, v0_C, c)!=-1) {
         return false;
      }
      return true;
   }
   private final boolean initRule1() {
      final Term v1_A;
      v1_A = a0;
      final Term v1_B;
      v1_B = a1;
      final Term v1_C;
      v1_C = a2;
      if (NUMERIC_TERM_COMPARATOR.compare(v1_A, v1_B, c)<0) {
         return false;
      }
      if (NUMERIC_TERM_COMPARATOR.compare(v1_A, v1_C, c)>0) {
         return false;
      }
      return true;
   }
   private final boolean initRule2() {
      final Term v2_A;
      v2_A = a0;
      final Term v2_B;
      v2_B = a1;
      final Term v2_C;
      v2_C = a2;
      if (NUMERIC_TERM_COMPARATOR.compare(v2_A, v2_B, c)!=0) {
         return false;
      }
      if (NUMERIC_TERM_COMPARATOR.compare(v2_A, v2_C, c)==0) {
         return false;
      }
      return true;
   }
   public %CLASS_NAME%(final KnowledgeBase _kb) {
      c = KnowledgeBaseUtils.getCalculatables(_kb);
      s = KnowledgeBaseUtils.getSpyPoints(_kb).getSpyPoint(new PredicateKey("testNumericComparison", 3));
      d = false;
   }
   %CLASS_NAME%(final Term in0, final Term in1, final Term in2) {
      a0 = in0.getTerm();
      a1 = in1.getTerm();
      a2 = in2.getTerm();
      d = s.isEnabled();
   }
   private final void backtrack() {
      a0.backtrack();
      a1.backtrack();
      a2.backtrack();
   }
   public final boolean evaluate(final Term... args) {
      if (d) {
         if (clauseCtr==0) {
            if (d) {
               s.logCall(this, new Term[]{a0, a1, a2});
            }
         } else {
            if (d) {
               s.logRedo(this, new Term[]{a0, a1, a2});
            }
         }
      }
      switch (clauseCtr) {
         case 0:
         if (initRule0()) {
            clauseCtr = 1;
            if (d) {
               s.logExit(this, new Term[]{a0, a1, a2});
            }
            return true;
         }
         case 1:
         backtrack();
         if (initRule1()) {
            clauseCtr = 2;
            if (d) {
               s.logExit(this, new Term[]{a0, a1, a2});
            }
            return true;
         }
         case 2:
         backtrack();
         if (initRule2()) {
            clauseCtr = 3;
            if (d) {
               s.logExit(this, new Term[]{a0, a1, a2});
            }
            return true;
         }
      }
      clauseCtr = 3;
      backtrack();
      if (d) {
         s.logFail(this, new Term[]{a0, a1, a2});
      }
      return false;
   }
   public final boolean isRetryable() {
      return true;
   }
   public final boolean couldReevaluationSucceed() {
      if (clauseCtr<3) {
         return true;
      }
      return false;
   }
   public final void setKnowledgeBase(KnowledgeBase kb) {
      throw new RuntimeException();
   }
   public final Predicate getPredicate(final Term... termArgs) {
      return new %CLASS_NAME%(termArgs[0], termArgs[1], termArgs[2]);
   }
   private static Calculatables c;
   private static SpyPoints.SpyPoint s;
   private final boolean d;
   private int clauseCtr;
   private int conjunctionCtr;
   private Term a0;
   private Term a1;
   private Term a2;
}
