package org.projog.content_generated_at_runtime;
import org.projog.core.udp.compiler.*;
import org.projog.core.udp.interpreter.*;
import org.projog.core.udp.*;
import org.projog.core.term.*;
import org.projog.core.*;
import static org.projog.core.term.NumericTermComparator.NUMERIC_TERM_COMPARATOR;
// testSimpleNonTailRecursive/1
public final class %CLASS_NAME% extends CompiledTailRecursivePredicate {
   private final boolean initRule0() {
      final Term v0_N;
      return true;
   }
   private final boolean initRule1() {
      final Term v1_N;
      v1_N = a0;
      if (NUMERIC_TERM_COMPARATOR.compare(v1_N, INTEGER_1, c)!=1) {
         return false;
      }
      final Numeric y0;
      final Term v1_N1;
      v1_N1 = (((y0=c.getNumeric(v1_N)).getType()==TermType.INTEGER)?new IntegerNumber(y0.getLong()-1):new DecimalFraction(y0.getDouble()-1.0));
      a0 = v1_N1.getTerm();
      return true;
   }
   public %CLASS_NAME%(final KnowledgeBase _kb) {
      c = KnowledgeBaseUtils.getCalculatables(_kb);
      s = KnowledgeBaseUtils.getSpyPoints(_kb).getSpyPoint(new PredicateKey("testSimpleNonTailRecursive", 1));
      d = false;
   }
   %CLASS_NAME%(final Term in0) {
      a0 = in0.getTerm();
      d = s.isEnabled();
   }
   protected final void backtrack() {
      a0.backtrack();
   }
   protected final boolean matchFirstRule() {
      return initRule0();
   }
   protected final boolean matchSecondRule() {
      return initRule1();
   }
   public final boolean isRetryable() {
      return true;
   }
   public final boolean couldReevaluationSucceed() {
      if (clauseCtr<2) {
         return true;
      }
      return false;
   }
   public final void setKnowledgeBase(KnowledgeBase kb) {
      throw new RuntimeException();
   }
   public final Predicate getPredicate(final Term... termArgs) {
      return new %CLASS_NAME%(termArgs[0]);
   }
   private static final Term INTEGER_1 = new IntegerNumber(1L);
   private static Calculatables c;
   private static SpyPoints.SpyPoint s;
   private final boolean d;
   public final boolean[] isSingleResultIfArgumentImmutable() {
      return new boolean[]{false};
   }
   private int clauseCtr;
   private int conjunctionCtr;
   private Term a0;
}
