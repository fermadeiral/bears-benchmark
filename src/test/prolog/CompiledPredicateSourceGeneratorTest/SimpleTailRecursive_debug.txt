package org.projog.content_generated_at_runtime;
import org.projog.core.udp.compiler.*;
import org.projog.core.udp.interpreter.*;
import org.projog.core.udp.*;
import org.projog.core.term.*;
import org.projog.core.*;
import static org.projog.core.term.NumericTermComparator.NUMERIC_TERM_COMPARATOR;
// testSimpleTailRecursive/1
public final class %CLASS_NAME% extends CompiledTailRecursivePredicate {
   private final boolean initRule0() {
      if (a0==p0) {
         p0.setTail(EmptyList.EMPTY_LIST);
      }
      else {
         if (!EmptyList.EMPTY_LIST.unify(a0)) {
            return false;
         }
      }
      return true;
   }
   private final boolean initRule1() {
      final Term v1_X;
      final Term v1_Xs;
      if (a0==p0) {
         v1_X = new Variable("X");
         final List t0 = ListFactory.createList(v1_X, EmptyList.EMPTY_LIST);
         p0.setTail(t0);
         p0 = t0;
         v1_Xs = null;
      }
	  else 
	  if (a0.getType()==TermType.NAMED_VARIABLE) {
         v1_X = new Variable("X");
         p0 = ListFactory.createList(v1_X, EmptyList.EMPTY_LIST);
         if (!p0.unify(a0)) {
            return false;
         }
         v1_Xs = null;
      } else if (a0.getType()==TermType.LIST) {
         v1_X = a0.getArgument(0);
         v1_Xs = a0.getArgument(1);
      } else {
         return false;
      }
      a0 = v1_Xs==null?p0:v1_Xs.getTerm();
      return true;
   }
   public %CLASS_NAME%(final KnowledgeBase _kb) {
      s = KnowledgeBaseUtils.getSpyPoints(_kb).getSpyPoint(new PredicateKey("testSimpleTailRecursive", 1));
      d = false;
      isRetryable = true;
   }
   %CLASS_NAME%(final Term in0) {
      this(in0, true);
   }
   %CLASS_NAME%(final Term in0, final boolean isRetryable) {
      this.isRetryable = isRetryable;
      a0 = in0.getTerm();
      d = s.isEnabled();
   }
   protected final void backtrack() {
      if (a0!=p0) {
         a0.backtrack();
      }
   }
   protected final boolean matchFirstRule() {
      return initRule0();
   }
   protected final boolean matchSecondRule() {
      return initRule1();
   }
   public final boolean isRetryable() {
      return isRetryable;
   }
   public final boolean couldReevaluationSucceed() {
      return isRetryable;
   }
   public final void setKnowledgeBase(KnowledgeBase kb) {
      throw new RuntimeException();
   }
   public final Predicate getPredicate(final Term... termArgs) {
      return new %CLASS_NAME%(termArgs[0], !(termArgs[0].isImmutable()));
   }
   private static SpyPoints.SpyPoint s;
   private final boolean d;
   private List p0;
   public final boolean[] isSingleResultIfArgumentImmutable() {
      return new boolean[]{true};
   }
   private final boolean isRetryable;
   private static final boolean staticInitRule0(final Term a0, final List p0) {
      if (a0==p0) {
         p0.setTail(EmptyList.EMPTY_LIST);
      }
      else {
         if (!EmptyList.EMPTY_LIST.unify(a0)) {
            return false;
         }
      }
      return true;
   }
   static final boolean staticEvaluate(Term a0) {
      final boolean d = s.isEnabled();
      List p0 = null;
      do {
         if (d) {
            s.logCall(%CLASS_NAME%.class, new Term[]{a0});
         }
         final Term v1_X;
         final Term v1_Xs;
         if (a0==p0) {
            v1_X = new Variable("X");
            final List t0 = ListFactory.createList(v1_X, EmptyList.EMPTY_LIST);
            p0.setTail(t0);
            p0 = t0;
            v1_Xs = null;
         }
         else
         if (a0.getType()==TermType.NAMED_VARIABLE) {
            v1_X = new Variable("X");
            p0 = ListFactory.createList(v1_X, EmptyList.EMPTY_LIST);
            if (!p0.unify(a0)) {
               break;
            }
            v1_Xs = null;
         } else if (a0.getType()==TermType.LIST) {
            v1_X = a0.getArgument(0);
            v1_Xs = a0.getArgument(1);
         } else {
            break;
         }
         a0 = v1_Xs==null?p0:v1_Xs.getTerm();
      } while (true);
      if (staticInitRule0(a0, p0)) {
         if (d) {
            s.logExit(%CLASS_NAME%.class, new Term[]{a0});
         }
         return true;
      } else {
         if (d) {
            s.logFail(%CLASS_NAME%.class, new Term[]{a0});
         }
         return false;
      }
   }
   private int clauseCtr;
   private int conjunctionCtr;
   private Term a0;
}
