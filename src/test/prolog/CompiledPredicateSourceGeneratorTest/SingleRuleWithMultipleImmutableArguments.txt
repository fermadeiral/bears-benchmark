package org.projog.content_generated_at_runtime;
import org.projog.core.udp.compiler.*;
import org.projog.core.udp.interpreter.*;
import org.projog.core.udp.*;
import org.projog.core.term.*;
import org.projog.core.*;
import static org.projog.core.term.NumericTermComparator.NUMERIC_TERM_COMPARATOR;
// testSingleRuleWithMultipleImmutableArguments/4
public final class %CLASS_NAME% implements CompiledPredicate {
   private final boolean initRule0() {
      final Term v0_X;
      v0_X = a0;
      final Term v0_Y;
      v0_Y = a1;
      final Term v0_Z;
      v0_Z = a2;
      final Term v0_RuleNo;
      v0_RuleNo = a3;
      final Term v0_A;
      v0_A = ATOM;
      final Term v0_B;
      v0_B = ATOM_0;
      final Term v0_C;
      v0_C = ATOM_1;
      if (!v0_X.unify(v0_A)) {
         return false;
      }
      if (!v0_Y.unify(v0_B)) {
         return false;
      }
      if (!v0_Z.unify(v0_C)) {
         return false;
      }
      if (!v0_RuleNo.unify(INTEGER_1)) {
         return false;
      }
      return true;
   }
   private final boolean initRule1() {
      final Term v1_X;
      v1_X = a0;
      final Term v1_Y;
      v1_Y = a1;
      final Term v1_Z;
      v1_Z = a2;
      final Term v1_RuleNo;
      v1_RuleNo = a3;
      final Term v1_A;
      v1_A = ATOM;
      final Term v1_B;
      v1_B = ATOM_0;
      final Term v1_C;
      v1_C = ATOM_1;
      if (!v1_C.unify(v1_X)) {
         return false;
      }
      if (!v1_A.unify(v1_Y)) {
         return false;
      }
      if (!v1_B.unify(v1_Z)) {
         return false;
      }
      if (!v1_RuleNo.unify(INTEGER_2)) {
         return false;
      }
      return true;
   }
   private final boolean initRule2() {
      final Term v2_X;
      v2_X = a0;
      final Term v2_Y;
      v2_Y = a1;
      final Term v2_Z;
      v2_Z = a2;
      final Term v2_RuleNo;
      v2_RuleNo = a3;
      final Term v2_0_;
      v2_0_ = ATOM;
      if (!v2_Y.unify(ATOM_0)) {
         return false;
      }
      if (!ATOM_1.unify(ATOM_1)) {
         return false;
      }
      if (!v2_X.unify(ATOM)) {
         return false;
      }
      if (!v2_X.unify(ATOM)) {
         return false;
      }
      if (!v2_Y.unify(ATOM_0)) {
         return false;
      }
      if (!v2_Z.unify(ATOM_1)) {
         return false;
      }
      if (!v2_RuleNo.unify(INTEGER_3)) {
         return false;
      }
      return true;
   }
   private final boolean initRule3() {
      final Term v3_X;
      final Term v3_Y;
      final Term v3_Z;
      final Term v3_RuleNo;
      v3_RuleNo = a3;
      if (!ATOM.unify(ATOM)) {
         return false;
      }
      if (!ATOM_0.unify(ATOM_0)) {
         return false;
      }
      if (!ATOM_1.unify(ATOM_1)) {
         return false;
      }
      if (!v3_RuleNo.unify(INTEGER_4)) {
         return false;
      }
      return true;
   }
   private final boolean initRule4() {
      final Term v4_X;
      final Term v4_Y;
      final Term v4_Z;
      final Term v4_RuleNo;
      v4_RuleNo = a3;
      if (!ATOM_2.unify(ATOM)) {
         return false;
      }
      if (!ATOM_0.unify(ATOM_0)) {
         return false;
      }
      if (!ATOM_1.unify(ATOM_1)) {
         return false;
      }
      if (!v4_RuleNo.unify(INTEGER_5)) {
         return false;
      }
      return true;
   }
   private final boolean initRule5() {
      final Term v5_X;
      final Term v5_Y;
      final Term v5_Z;
      final Term v5_RuleNo;
      v5_RuleNo = a3;
      if (!ATOM.unify(ATOM)) {
         return false;
      }
      if (!ATOM_1.unify(ATOM_0)) {
         return false;
      }
      if (!ATOM_1.unify(ATOM_1)) {
         return false;
      }
      if (!v5_RuleNo.unify(INTEGER_6)) {
         return false;
      }
      return true;
   }
   private final boolean initRule6() {
      final Term v6_X;
      final Term v6_Y;
      final Term v6_Z;
      final Term v6_RuleNo;
      v6_RuleNo = a3;
      if (!ATOM.unify(ATOM)) {
         return false;
      }
      if (!ATOM_0.unify(ATOM_0)) {
         return false;
      }
      if (!ATOM_3.unify(ATOM_1)) {
         return false;
      }
      if (!v6_RuleNo.unify(INTEGER_7)) {
         return false;
      }
      return true;
   }
   private final boolean initRule7() {
      final Term v7_X;
      final Term v7_Y;
      final Term v7_Z;
      final Term v7_RuleNo;
      v7_RuleNo = a3;
      if (!ATOM_1.unify(ATOM)) {
         return false;
      }
      if (!ATOM_0.unify(ATOM_0)) {
         return false;
      }
      if (!ATOM.unify(ATOM_1)) {
         return false;
      }
      if (!v7_RuleNo.unify(INTEGER_8)) {
         return false;
      }
      return true;
   }
   private final boolean initRule8() {
      final Term v8_X;
      v8_X = a0;
      final Term v8_Y;
      v8_Y = a1;
      final Term v8_Z;
      v8_Z = a2;
      final Term v8_RuleNo;
      v8_RuleNo = a3;
      if (!ATOM.unify(ATOM)) {
         return false;
      }
      if (!ATOM_0.unify(ATOM_0)) {
         return false;
      }
      if (!v8_X.unify(ATOM_1)) {
         return false;
      }
      if (!v8_Z.unify(ATOM)) {
         return false;
      }
      if (!ATOM_0.unify(ATOM_0)) {
         return false;
      }
      if (!ATOM_1.unify(ATOM_1)) {
         return false;
      }
      if (!ATOM.unify(ATOM)) {
         return false;
      }
      if (!v8_Y.unify(ATOM_0)) {
         return false;
      }
      if (!ATOM_1.unify(ATOM_1)) {
         return false;
      }
      if (!v8_RuleNo.unify(INTEGER_9)) {
         return false;
      }
      return true;
   }
   public %CLASS_NAME%(final KnowledgeBase _kb) {
   }
   %CLASS_NAME%(final Term in0, final Term in1, final Term in2, final Term in3) {
      a0 = in0.getTerm();
      a1 = in1.getTerm();
      a2 = in2.getTerm();
      a3 = in3.getTerm();
   }
   private final void backtrack() {
      a0.backtrack();
      a1.backtrack();
      a2.backtrack();
      a3.backtrack();
   }
   public final boolean evaluate(final Term... args) {
      switch (clauseCtr) {
         case 0:
         if (initRule0()) {
            clauseCtr = 1;
            return true;
         }
         case 1:
         backtrack();
         if (initRule1()) {
            clauseCtr = 2;
            return true;
         }
         case 2:
         backtrack();
         if (initRule2()) {
            clauseCtr = 3;
            return true;
         }
         case 3:
         backtrack();
         if (initRule3()) {
            clauseCtr = 4;
            return true;
         }
         case 4:
         backtrack();
         if (initRule4()) {
            clauseCtr = 5;
            return true;
         }
         case 5:
         backtrack();
         if (initRule5()) {
            clauseCtr = 6;
            return true;
         }
         case 6:
         backtrack();
         if (initRule6()) {
            clauseCtr = 7;
            return true;
         }
         case 7:
         backtrack();
         if (initRule7()) {
            clauseCtr = 8;
            return true;
         }
         case 8:
         backtrack();
         if (initRule8()) {
            clauseCtr = 9;
            return true;
         }
      }
      clauseCtr = 9;
      backtrack();
      return false;
   }
   public final boolean isRetryable() {
      return true;
   }
   public final boolean couldReevaluationSucceed() {
      if (clauseCtr<9) {
         return true;
      }
      return false;
   }
   public final void setKnowledgeBase(KnowledgeBase kb) {
      throw new RuntimeException();
   }
   public final Predicate getPredicate(final Term... termArgs) {
      return new %CLASS_NAME%(termArgs[0], termArgs[1], termArgs[2], termArgs[3]);
   }
   private static final Term ATOM = new Atom("a");
   private static final Term ATOM_0 = new Atom("s");
   private static final Term ATOM_1 = new Atom("d");
   private static final Term INTEGER_1 = new IntegerNumber(1L);
   private static final Term INTEGER_2 = new IntegerNumber(2L);
   private static final Term INTEGER_3 = new IntegerNumber(3L);
   private static final Term INTEGER_4 = new IntegerNumber(4L);
   private static final Term ATOM_2 = new Atom("b");
   private static final Term INTEGER_5 = new IntegerNumber(5L);
   private static final Term INTEGER_6 = new IntegerNumber(6L);
   private static final Term ATOM_3 = new Atom("t");
   private static final Term INTEGER_7 = new IntegerNumber(7L);
   private static final Term INTEGER_8 = new IntegerNumber(8L);
   private static final Term INTEGER_9 = new IntegerNumber(9L);
   private int clauseCtr;
   private int conjunctionCtr;
   private Term a0;
   private Term a1;
   private Term a2;
   private Term a3;
}
